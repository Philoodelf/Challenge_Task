{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Philopater\\\\Desktop\\\\task\\\\project\\\\frontend\\\\src\\\\components\\\\CategorizedData.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n\n// const FinancialInstrumentList = ({ type }) => {\n//   const [data, setData] = useState([]);\n//   const [loading, setLoading] = useState(true);\n\n//   useEffect(() => {\n//     setLoading(true);\n//     fetch(`/api/financial/${type}`)\n//       .then((response) => response.json())\n//       .then((data) => {\n//         setData(data.hits.hits || []); // Adjust based on JSON structure\n//         setLoading(false);\n//       });\n//   }, [type]);\n\n//   if (loading) return <p>Loading...</p>;\n\n//   return (\n//     <ul>\n//       {data.map((item, index) => (\n//         <li key={index}>{item._source.symbol} - {item._source.name}</li>\n//       ))}\n//     </ul>\n//   );\n// };\n\n// export default FinancialInstrumentList;\n\n// import React, { useEffect, useState } from 'react';\n// import { fetchData } from '../api';\n\n// const CategorizedData = ({ endpoint }) => {\n//   const [data, setData] = useState(null);\n\n//   useEffect(() => {\n//     const getData = async () => {\n//       const result = await fetchData(endpoint);\n//       setData(result);\n//     };\n//     getData();\n//   }, [endpoint]);\n\n//   if (!data) return <p>Loading...</p>;\n\n//   return (\n//     <div>\n//       <h2>{endpoint} Data</h2>\n//       <pre>{JSON.stringify(data, null, 2)}</pre>\n//     </div>\n//   );\n// };\n\n// export default CategorizedData;\n\n// el code da sh8aaal haaaaaaaa\n\n// import React, { useEffect, useState } from 'react';\n// import { fetchData } from '../api';\n\n// const CategorizedData = ({ endpoint }) => {\n//   const [data, setData] = useState(null);\n//   const [error, setError] = useState(null);\n\n//   useEffect(() => {\n//     const getData = async () => {\n//       try {\n//         const result = await fetchData(endpoint);\n//         setData(result);\n//       } catch (err) {\n//         setError(err.message);\n//       }\n//     };\n//     getData();\n//   }, [endpoint]);\n\n//   if (error) return <p>Error: {error}</p>;\n//   if (!data) return <p>Loading...</p>;\n\n//   return (\n//     <div>\n//       <h2>{endpoint} Data</h2>\n//       <pre>{JSON.stringify(data, null, 2)}</pre>\n//     </div>\n//   );\n// };\n\n// const DataTable = ({ data }) => {\n//   const keys = Object.keys(data); // Get all keys from the data\n\n//   return (\n//     <table>\n//       <thead>\n//         <tr>\n//           {keys.map((key, index) => (\n//             <th key={index}>{key}</th>\n//           ))}\n//         </tr>\n//       </thead>\n//       <tbody>\n//         {data[keys[0]].map((item, rowIndex) => (\n//           <tr key={rowIndex}>\n//             {keys.map((key, colIndex) => (\n//               <td key={colIndex}>{item[key]}</td>\n//             ))}\n//           </tr>\n//         ))}\n//       </tbody>\n//     </table>\n//   );\n// };\n\n// export default CategorizedData;\n\n// import React, { useEffect, useState } from 'react';\n// import { fetchData } from '../api';\n\n// const CategorizedData = ({ endpoint }) => {\n//   const [data, setData] = useState(null);\n//   const [error, setError] = useState(null);\n\n//   useEffect(() => {\n//     const getData = async () => {\n//       try {\n//         const result = await fetchData(endpoint);\n//         setData(result); // Store the fetched data\n//       } catch (err) {\n//         setError(err.message);\n//       }\n//     };\n//     getData();\n//   }, [endpoint]);\n\n//   if (error) return <p>Error: {error}</p>;\n//   if (!data) return <p>Loading...</p>;\n\n//   return (\n//     <div>\n//       <h2>{endpoint.charAt(0).toUpperCase() + endpoint.slice(1)} Data</h2>\n//       <DataTable data={data} />\n//     </div>\n//   );\n// };\n\n// const DataTable = ({ data }) => {\n//   // Ensure data is an array of objects\n//   const tableHeaders = data.length > 0 ? Object.keys(data[0]) : [];\n\n//   return (\n//     <div className=\"overflow-x-auto mt-4\">\n//       <table className=\"min-w-full table-auto border border-gray-300\">\n//         {/* Table Header */}\n//         <thead>\n//           <tr className=\"bg-blue-600 text-white\">\n//             {tableHeaders.map((header, index) => (\n//               <th\n//                 key={index}\n//                 className=\"py-3 px-4 border border-gray-300 text-left capitalize\"\n//               >\n//                 {header.replace(/([A-Z])/g, \" $1\").trim()} {/* Format camelCase */}\n//               </th>\n//             ))}\n//           </tr>\n//         </thead>\n\n//         {/* Table Body */}\n//         <tbody>\n//           {data.map((row, rowIndex) => (\n//             <tr\n//               key={rowIndex}\n//               className={`${\n//                 rowIndex % 2 === 0 ? \"bg-gray-50\" : \"bg-white\"\n//               } hover:bg-gray-200`}\n//             >\n//               {tableHeaders.map((header, colIndex) => (\n//                 <td\n//                   key={colIndex}\n//                   className=\"py-3 px-4 border border-gray-300 text-gray-700\"\n//                 >\n//                   {/* Handle null, undefined, or nested objects */}\n//                   {row[header] !== null &&\n//                   row[header] !== undefined &&\n//                   typeof row[header] !== \"object\"\n//                     ? row[header]\n//                     : row[header] && typeof row[header] === \"object\"\n//                     ? JSON.stringify(row[header])\n//                     : \"N/A\"}\n//                 </td>\n//               ))}\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// };\n\n// export default CategorizedData;\n\n// el code ely sh8aaaaaaaaaaaaaaaaaaaaaaaaaaaal\n\n// import React, { useEffect, useState } from \"react\";\n// import { fetchData } from \"../api\";\n\n// const CategorizedData = ({ endpoint }) => {\n//   const [data, setData] = useState([]);\n//   const [error, setError] = useState(null);\n\n//   useEffect(() => {\n//     const getData = async () => {\n//       try {\n//         const result = await fetchData(endpoint);\n//         console.log(\"Fetched Data:\", result); // Log fetched data to check format\n//         if (Array.isArray(result)) {\n//           setData(result); // Set data only if it's an array\n//         } else if (result && typeof result === \"object\") {\n//           // Convert object values to an array\n//           setData(Object.values(result));\n//         } else {\n//           setData([]); // Fallback to an empty array\n//         }\n//       } catch (err) {\n//         console.error(\"Error fetching data:\", err.message);\n//         setError(err.message);\n//       }\n//     };\n//     getData();\n//   }, [endpoint]);\n\n//   if (error)\n//     return <p className=\"text-center text-red-500 font-semibold\">Error: {error}</p>;\n//   if (!data || data.length === 0)\n//     return <p className=\"text-center text-gray-500 font-semibold\">loading....</p>;\n\n//   return (\n//     <div className=\"p-4\">\n//       <h2 className=\"text-2xl font-semibold text-center text-blue-600 mb-4\">\n//         {endpoint.charAt(0).toUpperCase() + endpoint.slice(1)} Data\n//       </h2>\n//       <DataTable data={data} />\n//     </div>\n//   );\n// };\n\n// const DataTable = ({ data }) => {\n//   if (!Array.isArray(data) || data.length === 0) {\n//     return <p className=\"text-center text-gray-500\">loading...</p>;\n//   }\n\n//   // Extract headers dynamically from the first row\n//   const tableHeaders = Object.keys(data[0]);\n\n//   return (\n//     <div className=\"overflow-x-auto mt-4\">\n//       <table className=\"min-w-full table-auto border border-gray-300\">\n//         {/* Table Header */}\n//         <thead>\n//           <tr className=\"bg-blue-600 text-white\">\n//             {tableHeaders.map((header, index) => (\n//               <th\n//                 key={index}\n//                 className=\"py-3 px-4 border border-gray-300 text-left capitalize\"\n//               >\n//                 {header.replace(/([A-Z])/g, \" $1\").trim()} {/* Format camelCase */}\n//               </th>\n//             ))}\n//           </tr>\n//         </thead>\n\n//         {/* Table Body */}\n//         <tbody>\n//           {data.map((row, rowIndex) => (\n//             <tr\n//               key={rowIndex}\n//               className={`${\n//                 rowIndex % 2 === 0 ? \"bg-gray-50\" : \"bg-white\"\n//               } hover:bg-gray-200`}\n//             >\n//               {tableHeaders.map((header, colIndex) => (\n//                 <td\n//                   key={colIndex}\n//                   className=\"py-3 px-4 border border-gray-300 text-gray-700\"\n//                 >\n//                   {/* Handle null, undefined, or nested objects */}\n//                   {row[header] !== null &&\n//                   row[header] !== undefined &&\n//                   typeof row[header] !== \"object\"\n//                     ? row[header]\n//                     : row[header] && typeof row[header] === \"object\"\n//                     ? JSON.stringify(row[header])\n//                     : \"N/A\"}\n//                 </td>\n//               ))}\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// };\n\n// export default CategorizedData;\n\nimport React, { useEffect, useState } from \"react\";\nimport { fetchData } from \"../api\";\nimport Table from \"react-bootstrap/Table\";\nimport Form from \"react-bootstrap/Form\";\nimport Alert from \"react-bootstrap/Alert\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CategorizedData = ({\n  endpoint\n}) => {\n  _s();\n  const [data, setData] = useState([]);\n  const [filteredData, setFilteredData] = useState([]);\n  const [search, setSearch] = useState(\"\"); // Search input\n  const [error, setError] = useState(null);\n\n  // Fetch data from the backend\n  useEffect(() => {\n    const getData = async () => {\n      try {\n        const result = await fetchData(endpoint);\n        const transformedData = result.hits.hits.map(item => item._source);\n        setData(transformedData);\n        setFilteredData(transformedData);\n      } catch (err) {\n        setError(err.message);\n      }\n    };\n    getData();\n  }, [endpoint]);\n\n  // Handle search\n  const handleSearch = e => {\n    const searchTerm = e.target.value.toLowerCase();\n    setSearch(searchTerm);\n    const filtered = data.filter(row => Object.values(row).some(val => val.toString().toLowerCase().includes(searchTerm)));\n    setFilteredData(filtered);\n  };\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(Alert, {\n      variant: \"danger\",\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 349,\n      columnNumber: 12\n    }, this);\n  }\n  if (!data.length) {\n    return /*#__PURE__*/_jsxDEV(Alert, {\n      variant: \"info\",\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 353,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container mt-4\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-center mb-4\",\n      children: [endpoint.toUpperCase(), \" Data\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 358,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n      type: \"text\",\n      placeholder: \"Search...\",\n      value: search,\n      onChange: handleSearch,\n      className: \"mb-4\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 361,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Table, {\n      striped: true,\n      bordered: true,\n      hover: true,\n      responsive: true,\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        className: \"table-dark\",\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: Object.keys(data[0]).map((header, index) => /*#__PURE__*/_jsxDEV(\"th\", {\n            children: header.replace(/([A-Z])/g, \" $1\").trim()\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 374,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 372,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 371,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: filteredData.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: Object.keys(row).map((key, colIndex) => /*#__PURE__*/_jsxDEV(\"td\", {\n            children: row[key] !== null && row[key] !== undefined ? row[key].toString() : \"N/A\"\n          }, colIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 382,\n            columnNumber: 17\n          }, this))\n        }, rowIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 380,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 378,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 370,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 357,\n    columnNumber: 5\n  }, this);\n};\n_s(CategorizedData, \"Noytynag3sI+rySVPlrLWKJBLzU=\");\n_c = CategorizedData;\nexport default CategorizedData;\nvar _c;\n$RefreshReg$(_c, \"CategorizedData\");","map":{"version":3,"names":["React","useEffect","useState","fetchData","Table","Form","Alert","jsxDEV","_jsxDEV","CategorizedData","endpoint","_s","data","setData","filteredData","setFilteredData","search","setSearch","error","setError","getData","result","transformedData","hits","map","item","_source","err","message","handleSearch","e","searchTerm","target","value","toLowerCase","filtered","filter","row","Object","values","some","val","toString","includes","variant","children","fileName","_jsxFileName","lineNumber","columnNumber","length","className","toUpperCase","Control","type","placeholder","onChange","striped","bordered","hover","responsive","keys","header","index","replace","trim","rowIndex","key","colIndex","undefined","_c","$RefreshReg$"],"sources":["C:/Users/Philopater/Desktop/task/project/frontend/src/components/CategorizedData.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\r\n\r\n// const FinancialInstrumentList = ({ type }) => {\r\n//   const [data, setData] = useState([]);\r\n//   const [loading, setLoading] = useState(true);\r\n\r\n//   useEffect(() => {\r\n//     setLoading(true);\r\n//     fetch(`/api/financial/${type}`)\r\n//       .then((response) => response.json())\r\n//       .then((data) => {\r\n//         setData(data.hits.hits || []); // Adjust based on JSON structure\r\n//         setLoading(false);\r\n//       });\r\n//   }, [type]);\r\n\r\n//   if (loading) return <p>Loading...</p>;\r\n\r\n//   return (\r\n//     <ul>\r\n//       {data.map((item, index) => (\r\n//         <li key={index}>{item._source.symbol} - {item._source.name}</li>\r\n//       ))}\r\n//     </ul>\r\n//   );\r\n// };\r\n\r\n// export default FinancialInstrumentList;\r\n\r\n// import React, { useEffect, useState } from 'react';\r\n// import { fetchData } from '../api';\r\n\r\n// const CategorizedData = ({ endpoint }) => {\r\n//   const [data, setData] = useState(null);\r\n\r\n//   useEffect(() => {\r\n//     const getData = async () => {\r\n//       const result = await fetchData(endpoint);\r\n//       setData(result);\r\n//     };\r\n//     getData();\r\n//   }, [endpoint]);\r\n\r\n//   if (!data) return <p>Loading...</p>;\r\n\r\n//   return (\r\n//     <div>\r\n//       <h2>{endpoint} Data</h2>\r\n//       <pre>{JSON.stringify(data, null, 2)}</pre>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default CategorizedData;\r\n\r\n    // el code da sh8aaal haaaaaaaa\r\n\r\n// import React, { useEffect, useState } from 'react';\r\n// import { fetchData } from '../api';\r\n\r\n// const CategorizedData = ({ endpoint }) => {\r\n//   const [data, setData] = useState(null);\r\n//   const [error, setError] = useState(null);\r\n\r\n//   useEffect(() => {\r\n//     const getData = async () => {\r\n//       try {\r\n//         const result = await fetchData(endpoint);\r\n//         setData(result);\r\n//       } catch (err) {\r\n//         setError(err.message);\r\n//       }\r\n//     };\r\n//     getData();\r\n//   }, [endpoint]);\r\n\r\n//   if (error) return <p>Error: {error}</p>;\r\n//   if (!data) return <p>Loading...</p>;\r\n\r\n//   return (\r\n//     <div>\r\n//       <h2>{endpoint} Data</h2>\r\n//       <pre>{JSON.stringify(data, null, 2)}</pre>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// const DataTable = ({ data }) => {\r\n//   const keys = Object.keys(data); // Get all keys from the data\r\n\r\n//   return (\r\n//     <table>\r\n//       <thead>\r\n//         <tr>\r\n//           {keys.map((key, index) => (\r\n//             <th key={index}>{key}</th>\r\n//           ))}\r\n//         </tr>\r\n//       </thead>\r\n//       <tbody>\r\n//         {data[keys[0]].map((item, rowIndex) => (\r\n//           <tr key={rowIndex}>\r\n//             {keys.map((key, colIndex) => (\r\n//               <td key={colIndex}>{item[key]}</td>\r\n//             ))}\r\n//           </tr>\r\n//         ))}\r\n//       </tbody>\r\n//     </table>\r\n//   );\r\n// };\r\n\r\n// export default CategorizedData;\r\n\r\n// import React, { useEffect, useState } from 'react';\r\n// import { fetchData } from '../api';\r\n\r\n// const CategorizedData = ({ endpoint }) => {\r\n//   const [data, setData] = useState(null);\r\n//   const [error, setError] = useState(null);\r\n\r\n//   useEffect(() => {\r\n//     const getData = async () => {\r\n//       try {\r\n//         const result = await fetchData(endpoint);\r\n//         setData(result); // Store the fetched data\r\n//       } catch (err) {\r\n//         setError(err.message);\r\n//       }\r\n//     };\r\n//     getData();\r\n//   }, [endpoint]);\r\n\r\n//   if (error) return <p>Error: {error}</p>;\r\n//   if (!data) return <p>Loading...</p>;\r\n\r\n//   return (\r\n//     <div>\r\n//       <h2>{endpoint.charAt(0).toUpperCase() + endpoint.slice(1)} Data</h2>\r\n//       <DataTable data={data} />\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// const DataTable = ({ data }) => {\r\n//   // Ensure data is an array of objects\r\n//   const tableHeaders = data.length > 0 ? Object.keys(data[0]) : [];\r\n\r\n//   return (\r\n//     <div className=\"overflow-x-auto mt-4\">\r\n//       <table className=\"min-w-full table-auto border border-gray-300\">\r\n//         {/* Table Header */}\r\n//         <thead>\r\n//           <tr className=\"bg-blue-600 text-white\">\r\n//             {tableHeaders.map((header, index) => (\r\n//               <th\r\n//                 key={index}\r\n//                 className=\"py-3 px-4 border border-gray-300 text-left capitalize\"\r\n//               >\r\n//                 {header.replace(/([A-Z])/g, \" $1\").trim()} {/* Format camelCase */}\r\n//               </th>\r\n//             ))}\r\n//           </tr>\r\n//         </thead>\r\n\r\n//         {/* Table Body */}\r\n//         <tbody>\r\n//           {data.map((row, rowIndex) => (\r\n//             <tr\r\n//               key={rowIndex}\r\n//               className={`${\r\n//                 rowIndex % 2 === 0 ? \"bg-gray-50\" : \"bg-white\"\r\n//               } hover:bg-gray-200`}\r\n//             >\r\n//               {tableHeaders.map((header, colIndex) => (\r\n//                 <td\r\n//                   key={colIndex}\r\n//                   className=\"py-3 px-4 border border-gray-300 text-gray-700\"\r\n//                 >\r\n//                   {/* Handle null, undefined, or nested objects */}\r\n//                   {row[header] !== null &&\r\n//                   row[header] !== undefined &&\r\n//                   typeof row[header] !== \"object\"\r\n//                     ? row[header]\r\n//                     : row[header] && typeof row[header] === \"object\"\r\n//                     ? JSON.stringify(row[header])\r\n//                     : \"N/A\"}\r\n//                 </td>\r\n//               ))}\r\n//             </tr>\r\n//           ))}\r\n//         </tbody>\r\n//       </table>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default CategorizedData;\r\n\r\n// el code ely sh8aaaaaaaaaaaaaaaaaaaaaaaaaaaal\r\n\r\n// import React, { useEffect, useState } from \"react\";\r\n// import { fetchData } from \"../api\";\r\n\r\n// const CategorizedData = ({ endpoint }) => {\r\n//   const [data, setData] = useState([]);\r\n//   const [error, setError] = useState(null);\r\n\r\n//   useEffect(() => {\r\n//     const getData = async () => {\r\n//       try {\r\n//         const result = await fetchData(endpoint);\r\n//         console.log(\"Fetched Data:\", result); // Log fetched data to check format\r\n//         if (Array.isArray(result)) {\r\n//           setData(result); // Set data only if it's an array\r\n//         } else if (result && typeof result === \"object\") {\r\n//           // Convert object values to an array\r\n//           setData(Object.values(result));\r\n//         } else {\r\n//           setData([]); // Fallback to an empty array\r\n//         }\r\n//       } catch (err) {\r\n//         console.error(\"Error fetching data:\", err.message);\r\n//         setError(err.message);\r\n//       }\r\n//     };\r\n//     getData();\r\n//   }, [endpoint]);\r\n\r\n//   if (error)\r\n//     return <p className=\"text-center text-red-500 font-semibold\">Error: {error}</p>;\r\n//   if (!data || data.length === 0)\r\n//     return <p className=\"text-center text-gray-500 font-semibold\">loading....</p>;\r\n\r\n//   return (\r\n//     <div className=\"p-4\">\r\n//       <h2 className=\"text-2xl font-semibold text-center text-blue-600 mb-4\">\r\n//         {endpoint.charAt(0).toUpperCase() + endpoint.slice(1)} Data\r\n//       </h2>\r\n//       <DataTable data={data} />\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// const DataTable = ({ data }) => {\r\n//   if (!Array.isArray(data) || data.length === 0) {\r\n//     return <p className=\"text-center text-gray-500\">loading...</p>;\r\n//   }\r\n\r\n//   // Extract headers dynamically from the first row\r\n//   const tableHeaders = Object.keys(data[0]);\r\n\r\n//   return (\r\n//     <div className=\"overflow-x-auto mt-4\">\r\n//       <table className=\"min-w-full table-auto border border-gray-300\">\r\n//         {/* Table Header */}\r\n//         <thead>\r\n//           <tr className=\"bg-blue-600 text-white\">\r\n//             {tableHeaders.map((header, index) => (\r\n//               <th\r\n//                 key={index}\r\n//                 className=\"py-3 px-4 border border-gray-300 text-left capitalize\"\r\n//               >\r\n//                 {header.replace(/([A-Z])/g, \" $1\").trim()} {/* Format camelCase */}\r\n//               </th>\r\n//             ))}\r\n//           </tr>\r\n//         </thead>\r\n\r\n//         {/* Table Body */}\r\n//         <tbody>\r\n//           {data.map((row, rowIndex) => (\r\n//             <tr\r\n//               key={rowIndex}\r\n//               className={`${\r\n//                 rowIndex % 2 === 0 ? \"bg-gray-50\" : \"bg-white\"\r\n//               } hover:bg-gray-200`}\r\n//             >\r\n//               {tableHeaders.map((header, colIndex) => (\r\n//                 <td\r\n//                   key={colIndex}\r\n//                   className=\"py-3 px-4 border border-gray-300 text-gray-700\"\r\n//                 >\r\n//                   {/* Handle null, undefined, or nested objects */}\r\n//                   {row[header] !== null &&\r\n//                   row[header] !== undefined &&\r\n//                   typeof row[header] !== \"object\"\r\n//                     ? row[header]\r\n//                     : row[header] && typeof row[header] === \"object\"\r\n//                     ? JSON.stringify(row[header])\r\n//                     : \"N/A\"}\r\n//                 </td>\r\n//               ))}\r\n//             </tr>\r\n//           ))}\r\n//         </tbody>\r\n//       </table>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default CategorizedData;\r\n\r\n\r\n\r\n\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { fetchData } from \"../api\";\r\nimport Table from \"react-bootstrap/Table\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Alert from \"react-bootstrap/Alert\";\r\n\r\nconst CategorizedData = ({ endpoint }) => {\r\n  const [data, setData] = useState([]);\r\n  const [filteredData, setFilteredData] = useState([]);\r\n  const [search, setSearch] = useState(\"\"); // Search input\r\n  const [error, setError] = useState(null);\r\n\r\n  // Fetch data from the backend\r\n  useEffect(() => {\r\n    const getData = async () => {\r\n      try {\r\n        const result = await fetchData(endpoint);\r\n        const transformedData = result.hits.hits.map((item) => item._source);\r\n        setData(transformedData);\r\n        setFilteredData(transformedData);\r\n      } catch (err) {\r\n        setError(err.message);\r\n      }\r\n    };\r\n    getData();\r\n  }, [endpoint]);\r\n\r\n  // Handle search\r\n  const handleSearch = (e) => {\r\n    const searchTerm = e.target.value.toLowerCase();\r\n    setSearch(searchTerm);\r\n\r\n    const filtered = data.filter((row) =>\r\n      Object.values(row).some((val) =>\r\n        val.toString().toLowerCase().includes(searchTerm)\r\n      )\r\n    );\r\n    setFilteredData(filtered);\r\n  };\r\n\r\n  if (error) {\r\n    return <Alert variant=\"danger\">Error: {error}</Alert>;\r\n  }\r\n\r\n  if (!data.length) {\r\n    return <Alert variant=\"info\">Loading...</Alert>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"container mt-4\">\r\n      <h2 className=\"text-center mb-4\">{endpoint.toUpperCase()} Data</h2>\r\n\r\n      {/* Search Bar */}\r\n      <Form.Control\r\n        type=\"text\"\r\n        placeholder=\"Search...\"\r\n        value={search}\r\n        onChange={handleSearch}\r\n        className=\"mb-4\"\r\n      />\r\n\r\n      {/* Table */}\r\n      <Table striped bordered hover responsive>\r\n        <thead className=\"table-dark\">\r\n          <tr>\r\n            {Object.keys(data[0]).map((header, index) => (\r\n              <th key={index}>{header.replace(/([A-Z])/g, \" $1\").trim()}</th>\r\n            ))}\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {filteredData.map((row, rowIndex) => (\r\n            <tr key={rowIndex}>\r\n              {Object.keys(row).map((key, colIndex) => (\r\n                <td key={colIndex}>\r\n                  {row[key] !== null && row[key] !== undefined\r\n                    ? row[key].toString()\r\n                    : \"N/A\"}\r\n                </td>\r\n              ))}\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </Table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CategorizedData;"],"mappings":";;AAAA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEI;;AAEJ;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}