{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Philopater\\\\Desktop\\\\task\\\\project\\\\frontend\\\\src\\\\components\\\\CategorizedData.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n\n// const FinancialInstrumentList = ({ type }) => {\n//   const [data, setData] = useState([]);\n//   const [loading, setLoading] = useState(true);\n\n//   useEffect(() => {\n//     setLoading(true);\n//     fetch(`/api/financial/${type}`)\n//       .then((response) => response.json())\n//       .then((data) => {\n//         setData(data.hits.hits || []); // Adjust based on JSON structure\n//         setLoading(false);\n//       });\n//   }, [type]);\n\n//   if (loading) return <p>Loading...</p>;\n\n//   return (\n//     <ul>\n//       {data.map((item, index) => (\n//         <li key={index}>{item._source.symbol} - {item._source.name}</li>\n//       ))}\n//     </ul>\n//   );\n// };\n\n// export default FinancialInstrumentList;\n\n// import React, { useEffect, useState } from 'react';\n// import { fetchData } from '../api';\n\n// const CategorizedData = ({ endpoint }) => {\n//   const [data, setData] = useState(null);\n\n//   useEffect(() => {\n//     const getData = async () => {\n//       const result = await fetchData(endpoint);\n//       setData(result);\n//     };\n//     getData();\n//   }, [endpoint]);\n\n//   if (!data) return <p>Loading...</p>;\n\n//   return (\n//     <div>\n//       <h2>{endpoint} Data</h2>\n//       <pre>{JSON.stringify(data, null, 2)}</pre>\n//     </div>\n//   );\n// };\n\n// export default CategorizedData;\n\n// el code da sh8aaal haaaaaaaa\n\n// import React, { useEffect, useState } from 'react';\n// import { fetchData } from '../api';\n\n// const CategorizedData = ({ endpoint }) => {\n//   const [data, setData] = useState(null);\n//   const [error, setError] = useState(null);\n\n//   useEffect(() => {\n//     const getData = async () => {\n//       try {\n//         const result = await fetchData(endpoint);\n//         setData(result);\n//       } catch (err) {\n//         setError(err.message);\n//       }\n//     };\n//     getData();\n//   }, [endpoint]);\n\n//   if (error) return <p>Error: {error}</p>;\n//   if (!data) return <p>Loading...</p>;\n\n//   return (\n//     <div>\n//       <h2>{endpoint} Data</h2>\n//       <pre>{JSON.stringify(data, null, 2)}</pre>\n//     </div>\n//   );\n// };\n\n// const DataTable = ({ data }) => {\n//   const keys = Object.keys(data); // Get all keys from the data\n\n//   return (\n//     <table>\n//       <thead>\n//         <tr>\n//           {keys.map((key, index) => (\n//             <th key={index}>{key}</th>\n//           ))}\n//         </tr>\n//       </thead>\n//       <tbody>\n//         {data[keys[0]].map((item, rowIndex) => (\n//           <tr key={rowIndex}>\n//             {keys.map((key, colIndex) => (\n//               <td key={colIndex}>{item[key]}</td>\n//             ))}\n//           </tr>\n//         ))}\n//       </tbody>\n//     </table>\n//   );\n// };\n\n// export default CategorizedData;\n\n// import React, { useEffect, useState } from 'react';\n// import { fetchData } from '../api';\n\n// const CategorizedData = ({ endpoint }) => {\n//   const [data, setData] = useState(null);\n//   const [error, setError] = useState(null);\n\n//   useEffect(() => {\n//     const getData = async () => {\n//       try {\n//         const result = await fetchData(endpoint);\n//         setData(result); // Store the fetched data\n//       } catch (err) {\n//         setError(err.message);\n//       }\n//     };\n//     getData();\n//   }, [endpoint]);\n\n//   if (error) return <p>Error: {error}</p>;\n//   if (!data) return <p>Loading...</p>;\n\n//   return (\n//     <div>\n//       <h2>{endpoint.charAt(0).toUpperCase() + endpoint.slice(1)} Data</h2>\n//       <DataTable data={data} />\n//     </div>\n//   );\n// };\n\n// const DataTable = ({ data }) => {\n//   // Ensure data is an array of objects\n//   const tableHeaders = data.length > 0 ? Object.keys(data[0]) : [];\n\n//   return (\n//     <div className=\"overflow-x-auto mt-4\">\n//       <table className=\"min-w-full table-auto border border-gray-300\">\n//         {/* Table Header */}\n//         <thead>\n//           <tr className=\"bg-blue-600 text-white\">\n//             {tableHeaders.map((header, index) => (\n//               <th\n//                 key={index}\n//                 className=\"py-3 px-4 border border-gray-300 text-left capitalize\"\n//               >\n//                 {header.replace(/([A-Z])/g, \" $1\").trim()} {/* Format camelCase */}\n//               </th>\n//             ))}\n//           </tr>\n//         </thead>\n\n//         {/* Table Body */}\n//         <tbody>\n//           {data.map((row, rowIndex) => (\n//             <tr\n//               key={rowIndex}\n//               className={`${\n//                 rowIndex % 2 === 0 ? \"bg-gray-50\" : \"bg-white\"\n//               } hover:bg-gray-200`}\n//             >\n//               {tableHeaders.map((header, colIndex) => (\n//                 <td\n//                   key={colIndex}\n//                   className=\"py-3 px-4 border border-gray-300 text-gray-700\"\n//                 >\n//                   {/* Handle null, undefined, or nested objects */}\n//                   {row[header] !== null &&\n//                   row[header] !== undefined &&\n//                   typeof row[header] !== \"object\"\n//                     ? row[header]\n//                     : row[header] && typeof row[header] === \"object\"\n//                     ? JSON.stringify(row[header])\n//                     : \"N/A\"}\n//                 </td>\n//               ))}\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// };\n\n// export default CategorizedData;\n\n// el code ely sh8aaaaaaaaaaaaaaaaaaaaaaaaaaaal\n\n// import React, { useEffect, useState } from \"react\";\n// import { fetchData } from \"../api\";\n\n// const CategorizedData = ({ endpoint }) => {\n//   const [data, setData] = useState([]);\n//   const [error, setError] = useState(null);\n\n//   useEffect(() => {\n//     const getData = async () => {\n//       try {\n//         const result = await fetchData(endpoint);\n//         console.log(\"Fetched Data:\", result); // Log fetched data to check format\n//         if (Array.isArray(result)) {\n//           setData(result); // Set data only if it's an array\n//         } else if (result && typeof result === \"object\") {\n//           // Convert object values to an array\n//           setData(Object.values(result));\n//         } else {\n//           setData([]); // Fallback to an empty array\n//         }\n//       } catch (err) {\n//         console.error(\"Error fetching data:\", err.message);\n//         setError(err.message);\n//       }\n//     };\n//     getData();\n//   }, [endpoint]);\n\n//   if (error)\n//     return <p className=\"text-center text-red-500 font-semibold\">Error: {error}</p>;\n//   if (!data || data.length === 0)\n//     return <p className=\"text-center text-gray-500 font-semibold\">loading....</p>;\n\n//   return (\n//     <div className=\"p-4\">\n//       <h2 className=\"text-2xl font-semibold text-center text-blue-600 mb-4\">\n//         {endpoint.charAt(0).toUpperCase() + endpoint.slice(1)} Data\n//       </h2>\n//       <DataTable data={data} />\n//     </div>\n//   );\n// };\n\n// const DataTable = ({ data }) => {\n//   if (!Array.isArray(data) || data.length === 0) {\n//     return <p className=\"text-center text-gray-500\">loading...</p>;\n//   }\n\n//   // Extract headers dynamically from the first row\n//   const tableHeaders = Object.keys(data[0]);\n\n//   return (\n//     <div className=\"overflow-x-auto mt-4\">\n//       <table className=\"min-w-full table-auto border border-gray-300\">\n//         {/* Table Header */}\n//         <thead>\n//           <tr className=\"bg-blue-600 text-white\">\n//             {tableHeaders.map((header, index) => (\n//               <th\n//                 key={index}\n//                 className=\"py-3 px-4 border border-gray-300 text-left capitalize\"\n//               >\n//                 {header.replace(/([A-Z])/g, \" $1\").trim()} {/* Format camelCase */}\n//               </th>\n//             ))}\n//           </tr>\n//         </thead>\n\n//         {/* Table Body */}\n//         <tbody>\n//           {data.map((row, rowIndex) => (\n//             <tr\n//               key={rowIndex}\n//               className={`${\n//                 rowIndex % 2 === 0 ? \"bg-gray-50\" : \"bg-white\"\n//               } hover:bg-gray-200`}\n//             >\n//               {tableHeaders.map((header, colIndex) => (\n//                 <td\n//                   key={colIndex}\n//                   className=\"py-3 px-4 border border-gray-300 text-gray-700\"\n//                 >\n//                   {/* Handle null, undefined, or nested objects */}\n//                   {row[header] !== null &&\n//                   row[header] !== undefined &&\n//                   typeof row[header] !== \"object\"\n//                     ? row[header]\n//                     : row[header] && typeof row[header] === \"object\"\n//                     ? JSON.stringify(row[header])\n//                     : \"N/A\"}\n//                 </td>\n//               ))}\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// };\n\n// export default CategorizedData;\n\nimport React, { useEffect, useState } from \"react\";\nimport { fetchData } from \"../api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CategorizedData = ({\n  endpoint\n}) => {\n  _s();\n  const [data, setData] = useState([]); // All fetched data\n  const [filteredData, setFilteredData] = useState([]); // Filtered data for display\n  const [error, setError] = useState(null);\n  //const [search, setSearch] = useState(\"\"); // Search term\n  const [currentPage, setCurrentPage] = useState(1); // Current page\n  const rowsPerPage = 5; // Number of rows per page\n\n  useEffect(() => {\n    const getData = async () => {\n      try {\n        const result = await fetchData(endpoint);\n        if (Array.isArray(result)) {\n          setData(result);\n          setFilteredData(result); // Initialize filtered data\n        } else if (result && typeof result === \"object\") {\n          const values = Object.values(result);\n          setData(values);\n          setFilteredData(values);\n        } else {\n          setData([]);\n          setFilteredData([]);\n        }\n      } catch (err) {\n        setError(err.message);\n      }\n    };\n    getData();\n  }, [endpoint]);\n\n  // Handle search filter\n  useEffect(() => {\n    if (search.trim() === \"\") {\n      setFilteredData(data);\n    } else {\n      const lowerSearch = search.toLowerCase();\n      setFilteredData(data.filter(item => Object.values(item).some(value => value && value.toString().toLowerCase().includes(lowerSearch))));\n    }\n  }, [search, data]);\n\n  // Pagination logic\n  const startIndex = (currentPage - 1) * rowsPerPage;\n  const paginatedData = filteredData.slice(startIndex, startIndex + rowsPerPage);\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-center text-red-500 font-semibold\",\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 368,\n      columnNumber: 12\n    }, this);\n  }\n  if (!filteredData || filteredData.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-center text-gray-500 font-semibold\",\n      children: \"No data available.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 372,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-4\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-2xl font-semibold text-center text-blue-600 mb-4\",\n      children: [endpoint.charAt(0).toUpperCase() + endpoint.slice(1), \" Data\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 377,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex justify-center mb-4\",\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        className: \"border border-gray-300 rounded-lg px-4 py-2 w-1/2 focus:outline-none focus:ring focus:ring-blue-300\",\n        placeholder: \"Search...\",\n        value: search,\n        onChange: e => setSearch(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 383,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 382,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DataTable, {\n      data: paginatedData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 393,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Pagination, {\n      currentPage: currentPage,\n      totalRows: filteredData.length,\n      rowsPerPage: rowsPerPage,\n      onPageChange: page => setCurrentPage(page)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 396,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 376,\n    columnNumber: 5\n  }, this);\n};\n_s(CategorizedData, \"WoL2oVeNQ/RD9Zxvi5TIJuSB0d4=\");\n_c = CategorizedData;\nconst DataTable = ({\n  data\n}) => {\n  if (!Array.isArray(data) || data.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-center text-gray-500\",\n      children: \"No records to display.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 408,\n      columnNumber: 12\n    }, this);\n  }\n  const headers = Object.keys(data[0]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"overflow-x-auto mt-4\",\n    children: /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"min-w-full table-auto border border-gray-300\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          className: \"bg-blue-600 text-white\",\n          children: headers.map((header, index) => /*#__PURE__*/_jsxDEV(\"th\", {\n            className: \"py-2 px-4 text-left border border-gray-300 capitalize\",\n            children: header.replace(/([A-Z])/g, \" $1\").trim()\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 419,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 417,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 416,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: data.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          className: `${rowIndex % 2 === 0 ? \"bg-gray-50\" : \"bg-white\"} hover:bg-gray-200`,\n          children: headers.map((header, colIndex) => /*#__PURE__*/_jsxDEV(\"td\", {\n            className: \"py-2 px-4 border border-gray-300\",\n            children: row[header] !== null && row[header] !== undefined && typeof row[header] !== \"object\" ? row[header] : JSON.stringify(row[header])\n          }, colIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 437,\n            columnNumber: 17\n          }, this))\n        }, rowIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 430,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 428,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 415,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 414,\n    columnNumber: 5\n  }, this);\n};\n_c2 = DataTable;\nconst Pagination = ({\n  currentPage,\n  totalRows,\n  rowsPerPage,\n  onPageChange\n}) => {\n  const totalPages = Math.ceil(totalRows / rowsPerPage);\n  if (totalPages <= 1) {\n    return null; // Hide pagination for single-page data\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex justify-center mt-4\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"px-3 py-1 border border-gray-300 rounded-l-lg bg-gray-100 hover:bg-gray-200\",\n      onClick: () => onPageChange(currentPage - 1),\n      disabled: currentPage === 1,\n      children: \"Previous\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 462,\n      columnNumber: 7\n    }, this), [...Array(totalPages).keys()].map(page => /*#__PURE__*/_jsxDEV(\"button\", {\n      className: `px-3 py-1 border border-gray-300 ${currentPage === page + 1 ? \"bg-blue-600 text-white\" : \"bg-gray-100\"} hover:bg-gray-200`,\n      onClick: () => onPageChange(page + 1),\n      children: page + 1\n    }, page, false, {\n      fileName: _jsxFileName,\n      lineNumber: 470,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"px-3 py-1 border border-gray-300 rounded-r-lg bg-gray-100 hover:bg-gray-200\",\n      onClick: () => onPageChange(currentPage + 1),\n      disabled: currentPage === totalPages,\n      children: \"Next\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 480,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 461,\n    columnNumber: 5\n  }, this);\n};\n_c3 = Pagination;\nexport default CategorizedData;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"CategorizedData\");\n$RefreshReg$(_c2, \"DataTable\");\n$RefreshReg$(_c3, \"Pagination\");","map":{"version":3,"names":["React","useEffect","useState","fetchData","jsxDEV","_jsxDEV","CategorizedData","endpoint","_s","data","setData","filteredData","setFilteredData","error","setError","currentPage","setCurrentPage","rowsPerPage","getData","result","Array","isArray","values","Object","err","message","search","trim","lowerSearch","toLowerCase","filter","item","some","value","toString","includes","startIndex","paginatedData","slice","className","children","fileName","_jsxFileName","lineNumber","columnNumber","length","charAt","toUpperCase","type","placeholder","onChange","e","setSearch","target","DataTable","Pagination","totalRows","onPageChange","page","_c","headers","keys","map","header","index","replace","row","rowIndex","colIndex","undefined","JSON","stringify","_c2","totalPages","Math","ceil","onClick","disabled","_c3","$RefreshReg$"],"sources":["C:/Users/Philopater/Desktop/task/project/frontend/src/components/CategorizedData.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\r\n\r\n// const FinancialInstrumentList = ({ type }) => {\r\n//   const [data, setData] = useState([]);\r\n//   const [loading, setLoading] = useState(true);\r\n\r\n//   useEffect(() => {\r\n//     setLoading(true);\r\n//     fetch(`/api/financial/${type}`)\r\n//       .then((response) => response.json())\r\n//       .then((data) => {\r\n//         setData(data.hits.hits || []); // Adjust based on JSON structure\r\n//         setLoading(false);\r\n//       });\r\n//   }, [type]);\r\n\r\n//   if (loading) return <p>Loading...</p>;\r\n\r\n//   return (\r\n//     <ul>\r\n//       {data.map((item, index) => (\r\n//         <li key={index}>{item._source.symbol} - {item._source.name}</li>\r\n//       ))}\r\n//     </ul>\r\n//   );\r\n// };\r\n\r\n// export default FinancialInstrumentList;\r\n\r\n// import React, { useEffect, useState } from 'react';\r\n// import { fetchData } from '../api';\r\n\r\n// const CategorizedData = ({ endpoint }) => {\r\n//   const [data, setData] = useState(null);\r\n\r\n//   useEffect(() => {\r\n//     const getData = async () => {\r\n//       const result = await fetchData(endpoint);\r\n//       setData(result);\r\n//     };\r\n//     getData();\r\n//   }, [endpoint]);\r\n\r\n//   if (!data) return <p>Loading...</p>;\r\n\r\n//   return (\r\n//     <div>\r\n//       <h2>{endpoint} Data</h2>\r\n//       <pre>{JSON.stringify(data, null, 2)}</pre>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default CategorizedData;\r\n\r\n    // el code da sh8aaal haaaaaaaa\r\n\r\n// import React, { useEffect, useState } from 'react';\r\n// import { fetchData } from '../api';\r\n\r\n// const CategorizedData = ({ endpoint }) => {\r\n//   const [data, setData] = useState(null);\r\n//   const [error, setError] = useState(null);\r\n\r\n//   useEffect(() => {\r\n//     const getData = async () => {\r\n//       try {\r\n//         const result = await fetchData(endpoint);\r\n//         setData(result);\r\n//       } catch (err) {\r\n//         setError(err.message);\r\n//       }\r\n//     };\r\n//     getData();\r\n//   }, [endpoint]);\r\n\r\n//   if (error) return <p>Error: {error}</p>;\r\n//   if (!data) return <p>Loading...</p>;\r\n\r\n//   return (\r\n//     <div>\r\n//       <h2>{endpoint} Data</h2>\r\n//       <pre>{JSON.stringify(data, null, 2)}</pre>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// const DataTable = ({ data }) => {\r\n//   const keys = Object.keys(data); // Get all keys from the data\r\n\r\n//   return (\r\n//     <table>\r\n//       <thead>\r\n//         <tr>\r\n//           {keys.map((key, index) => (\r\n//             <th key={index}>{key}</th>\r\n//           ))}\r\n//         </tr>\r\n//       </thead>\r\n//       <tbody>\r\n//         {data[keys[0]].map((item, rowIndex) => (\r\n//           <tr key={rowIndex}>\r\n//             {keys.map((key, colIndex) => (\r\n//               <td key={colIndex}>{item[key]}</td>\r\n//             ))}\r\n//           </tr>\r\n//         ))}\r\n//       </tbody>\r\n//     </table>\r\n//   );\r\n// };\r\n\r\n// export default CategorizedData;\r\n\r\n// import React, { useEffect, useState } from 'react';\r\n// import { fetchData } from '../api';\r\n\r\n// const CategorizedData = ({ endpoint }) => {\r\n//   const [data, setData] = useState(null);\r\n//   const [error, setError] = useState(null);\r\n\r\n//   useEffect(() => {\r\n//     const getData = async () => {\r\n//       try {\r\n//         const result = await fetchData(endpoint);\r\n//         setData(result); // Store the fetched data\r\n//       } catch (err) {\r\n//         setError(err.message);\r\n//       }\r\n//     };\r\n//     getData();\r\n//   }, [endpoint]);\r\n\r\n//   if (error) return <p>Error: {error}</p>;\r\n//   if (!data) return <p>Loading...</p>;\r\n\r\n//   return (\r\n//     <div>\r\n//       <h2>{endpoint.charAt(0).toUpperCase() + endpoint.slice(1)} Data</h2>\r\n//       <DataTable data={data} />\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// const DataTable = ({ data }) => {\r\n//   // Ensure data is an array of objects\r\n//   const tableHeaders = data.length > 0 ? Object.keys(data[0]) : [];\r\n\r\n//   return (\r\n//     <div className=\"overflow-x-auto mt-4\">\r\n//       <table className=\"min-w-full table-auto border border-gray-300\">\r\n//         {/* Table Header */}\r\n//         <thead>\r\n//           <tr className=\"bg-blue-600 text-white\">\r\n//             {tableHeaders.map((header, index) => (\r\n//               <th\r\n//                 key={index}\r\n//                 className=\"py-3 px-4 border border-gray-300 text-left capitalize\"\r\n//               >\r\n//                 {header.replace(/([A-Z])/g, \" $1\").trim()} {/* Format camelCase */}\r\n//               </th>\r\n//             ))}\r\n//           </tr>\r\n//         </thead>\r\n\r\n//         {/* Table Body */}\r\n//         <tbody>\r\n//           {data.map((row, rowIndex) => (\r\n//             <tr\r\n//               key={rowIndex}\r\n//               className={`${\r\n//                 rowIndex % 2 === 0 ? \"bg-gray-50\" : \"bg-white\"\r\n//               } hover:bg-gray-200`}\r\n//             >\r\n//               {tableHeaders.map((header, colIndex) => (\r\n//                 <td\r\n//                   key={colIndex}\r\n//                   className=\"py-3 px-4 border border-gray-300 text-gray-700\"\r\n//                 >\r\n//                   {/* Handle null, undefined, or nested objects */}\r\n//                   {row[header] !== null &&\r\n//                   row[header] !== undefined &&\r\n//                   typeof row[header] !== \"object\"\r\n//                     ? row[header]\r\n//                     : row[header] && typeof row[header] === \"object\"\r\n//                     ? JSON.stringify(row[header])\r\n//                     : \"N/A\"}\r\n//                 </td>\r\n//               ))}\r\n//             </tr>\r\n//           ))}\r\n//         </tbody>\r\n//       </table>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default CategorizedData;\r\n\r\n// el code ely sh8aaaaaaaaaaaaaaaaaaaaaaaaaaaal\r\n\r\n// import React, { useEffect, useState } from \"react\";\r\n// import { fetchData } from \"../api\";\r\n\r\n\r\n// const CategorizedData = ({ endpoint }) => {\r\n//   const [data, setData] = useState([]);\r\n//   const [error, setError] = useState(null);\r\n\r\n//   useEffect(() => {\r\n//     const getData = async () => {\r\n//       try {\r\n//         const result = await fetchData(endpoint);\r\n//         console.log(\"Fetched Data:\", result); // Log fetched data to check format\r\n//         if (Array.isArray(result)) {\r\n//           setData(result); // Set data only if it's an array\r\n//         } else if (result && typeof result === \"object\") {\r\n//           // Convert object values to an array\r\n//           setData(Object.values(result));\r\n//         } else {\r\n//           setData([]); // Fallback to an empty array\r\n//         }\r\n//       } catch (err) {\r\n//         console.error(\"Error fetching data:\", err.message);\r\n//         setError(err.message);\r\n//       }\r\n//     };\r\n//     getData();\r\n//   }, [endpoint]);\r\n\r\n//   if (error)\r\n//     return <p className=\"text-center text-red-500 font-semibold\">Error: {error}</p>;\r\n//   if (!data || data.length === 0)\r\n//     return <p className=\"text-center text-gray-500 font-semibold\">loading....</p>;\r\n\r\n//   return (\r\n//     <div className=\"p-4\">\r\n//       <h2 className=\"text-2xl font-semibold text-center text-blue-600 mb-4\">\r\n//         {endpoint.charAt(0).toUpperCase() + endpoint.slice(1)} Data\r\n//       </h2>\r\n//       <DataTable data={data} />\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// const DataTable = ({ data }) => {\r\n//   if (!Array.isArray(data) || data.length === 0) {\r\n//     return <p className=\"text-center text-gray-500\">loading...</p>;\r\n//   }\r\n\r\n//   // Extract headers dynamically from the first row\r\n//   const tableHeaders = Object.keys(data[0]);\r\n\r\n//   return (\r\n//     <div className=\"overflow-x-auto mt-4\">\r\n//       <table className=\"min-w-full table-auto border border-gray-300\">\r\n//         {/* Table Header */}\r\n//         <thead>\r\n//           <tr className=\"bg-blue-600 text-white\">\r\n//             {tableHeaders.map((header, index) => (\r\n//               <th\r\n//                 key={index}\r\n//                 className=\"py-3 px-4 border border-gray-300 text-left capitalize\"\r\n//               >\r\n//                 {header.replace(/([A-Z])/g, \" $1\").trim()} {/* Format camelCase */}\r\n//               </th>\r\n//             ))}\r\n//           </tr>\r\n//         </thead>\r\n\r\n//         {/* Table Body */}\r\n//         <tbody>\r\n//           {data.map((row, rowIndex) => (\r\n//             <tr\r\n//               key={rowIndex}\r\n//               className={`${\r\n//                 rowIndex % 2 === 0 ? \"bg-gray-50\" : \"bg-white\"\r\n//               } hover:bg-gray-200`}\r\n//             >\r\n//               {tableHeaders.map((header, colIndex) => (\r\n//                 <td\r\n//                   key={colIndex}\r\n//                   className=\"py-3 px-4 border border-gray-300 text-gray-700\"\r\n//                 >\r\n//                   {/* Handle null, undefined, or nested objects */}\r\n//                   {row[header] !== null &&\r\n//                   row[header] !== undefined &&\r\n//                   typeof row[header] !== \"object\"\r\n//                     ? row[header]\r\n//                     : row[header] && typeof row[header] === \"object\"\r\n//                     ? JSON.stringify(row[header])\r\n//                     : \"N/A\"}\r\n//                 </td>\r\n//               ))}\r\n//             </tr>\r\n//           ))}\r\n//         </tbody>\r\n//       </table>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default CategorizedData;\r\n\r\n\r\n\r\n\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { fetchData } from \"../api\";\r\n\r\nconst CategorizedData = ({ endpoint }) => {\r\n  const [data, setData] = useState([]); // All fetched data\r\n  const [filteredData, setFilteredData] = useState([]); // Filtered data for display\r\n  const [error, setError] = useState(null);\r\n  //const [search, setSearch] = useState(\"\"); // Search term\r\n  const [currentPage, setCurrentPage] = useState(1); // Current page\r\n  const rowsPerPage = 5; // Number of rows per page\r\n\r\n  useEffect(() => {\r\n    const getData = async () => {\r\n      try {\r\n        const result = await fetchData(endpoint);\r\n        if (Array.isArray(result)) {\r\n          setData(result);\r\n          setFilteredData(result); // Initialize filtered data\r\n        } else if (result && typeof result === \"object\") {\r\n          const values = Object.values(result);\r\n          setData(values);\r\n          setFilteredData(values);\r\n        } else {\r\n          setData([]);\r\n          setFilteredData([]);\r\n        }\r\n      } catch (err) {\r\n        setError(err.message);\r\n      }\r\n    };\r\n    getData();\r\n  }, [endpoint]);\r\n\r\n  // Handle search filter\r\n  useEffect(() => {\r\n    if (search.trim() === \"\") {\r\n      setFilteredData(data);\r\n    } else {\r\n      const lowerSearch = search.toLowerCase();\r\n      setFilteredData(\r\n        data.filter((item) =>\r\n          Object.values(item).some(\r\n            (value) =>\r\n              value &&\r\n              value.toString().toLowerCase().includes(lowerSearch)\r\n          )\r\n        )\r\n      );\r\n    }\r\n  }, [search, data]);\r\n\r\n  // Pagination logic\r\n  const startIndex = (currentPage - 1) * rowsPerPage;\r\n  const paginatedData = filteredData.slice(\r\n    startIndex,\r\n    startIndex + rowsPerPage\r\n  );\r\n\r\n  if (error) {\r\n    return <p className=\"text-center text-red-500 font-semibold\">Error: {error}</p>;\r\n  }\r\n\r\n  if (!filteredData || filteredData.length === 0) {\r\n    return <p className=\"text-center text-gray-500 font-semibold\">No data available.</p>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"p-4\">\r\n      <h2 className=\"text-2xl font-semibold text-center text-blue-600 mb-4\">\r\n        {endpoint.charAt(0).toUpperCase() + endpoint.slice(1)} Data\r\n      </h2>\r\n\r\n      {/* Search Bar */}\r\n      <div className=\"flex justify-center mb-4\">\r\n        <input\r\n          type=\"text\"\r\n          className=\"border border-gray-300 rounded-lg px-4 py-2 w-1/2 focus:outline-none focus:ring focus:ring-blue-300\"\r\n          placeholder=\"Search...\"\r\n          value={search}\r\n          onChange={(e) => setSearch(e.target.value)}\r\n        />\r\n      </div>\r\n\r\n      {/* Data Table */}\r\n      <DataTable data={paginatedData} />\r\n\r\n      {/* Pagination Controls */}\r\n      <Pagination\r\n        currentPage={currentPage}\r\n        totalRows={filteredData.length}\r\n        rowsPerPage={rowsPerPage}\r\n        onPageChange={(page) => setCurrentPage(page)}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst DataTable = ({ data }) => {\r\n  if (!Array.isArray(data) || data.length === 0) {\r\n    return <p className=\"text-center text-gray-500\">No records to display.</p>;\r\n  }\r\n\r\n  const headers = Object.keys(data[0]);\r\n\r\n  return (\r\n    <div className=\"overflow-x-auto mt-4\">\r\n      <table className=\"min-w-full table-auto border border-gray-300\">\r\n        <thead>\r\n          <tr className=\"bg-blue-600 text-white\">\r\n            {headers.map((header, index) => (\r\n              <th\r\n                key={index}\r\n                className=\"py-2 px-4 text-left border border-gray-300 capitalize\"\r\n              >\r\n                {header.replace(/([A-Z])/g, \" $1\").trim()}\r\n              </th>\r\n            ))}\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {data.map((row, rowIndex) => (\r\n            <tr\r\n              key={rowIndex}\r\n              className={`${\r\n                rowIndex % 2 === 0 ? \"bg-gray-50\" : \"bg-white\"\r\n              } hover:bg-gray-200`}\r\n            >\r\n              {headers.map((header, colIndex) => (\r\n                <td key={colIndex} className=\"py-2 px-4 border border-gray-300\">\r\n                  {row[header] !== null &&\r\n                  row[header] !== undefined &&\r\n                  typeof row[header] !== \"object\"\r\n                    ? row[header]\r\n                    : JSON.stringify(row[header])}\r\n                </td>\r\n              ))}\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst Pagination = ({ currentPage, totalRows, rowsPerPage, onPageChange }) => {\r\n  const totalPages = Math.ceil(totalRows / rowsPerPage);\r\n\r\n  if (totalPages <= 1) {\r\n    return null; // Hide pagination for single-page data\r\n  }\r\n\r\n  return (\r\n    <div className=\"flex justify-center mt-4\">\r\n      <button\r\n        className=\"px-3 py-1 border border-gray-300 rounded-l-lg bg-gray-100 hover:bg-gray-200\"\r\n        onClick={() => onPageChange(currentPage - 1)}\r\n        disabled={currentPage === 1}\r\n      >\r\n        Previous\r\n      </button>\r\n      {[...Array(totalPages).keys()].map((page) => (\r\n        <button\r\n          key={page}\r\n          className={`px-3 py-1 border border-gray-300 ${\r\n            currentPage === page + 1 ? \"bg-blue-600 text-white\" : \"bg-gray-100\"\r\n          } hover:bg-gray-200`}\r\n          onClick={() => onPageChange(page + 1)}\r\n        >\r\n          {page + 1}\r\n        </button>\r\n      ))}\r\n      <button\r\n        className=\"px-3 py-1 border border-gray-300 rounded-r-lg bg-gray-100 hover:bg-gray-200\"\r\n        onClick={() => onPageChange(currentPage + 1)}\r\n        disabled={currentPage === totalPages}\r\n      >\r\n        Next\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CategorizedData;\r\n\r\n\r\n\r\n\r\n\r\n"],"mappings":";;AAAA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEI;;AAEJ;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}