{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Philopater\\\\Desktop\\\\task\\\\project\\\\frontend\\\\src\\\\components\\\\CategorizedData.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n\n// const FinancialInstrumentList = ({ type }) => {\n//   const [data, setData] = useState([]);\n//   const [loading, setLoading] = useState(true);\n\n//   useEffect(() => {\n//     setLoading(true);\n//     fetch(`/api/financial/${type}`)\n//       .then((response) => response.json())\n//       .then((data) => {\n//         setData(data.hits.hits || []); // Adjust based on JSON structure\n//         setLoading(false);\n//       });\n//   }, [type]);\n\n//   if (loading) return <p>Loading...</p>;\n\n//   return (\n//     <ul>\n//       {data.map((item, index) => (\n//         <li key={index}>{item._source.symbol} - {item._source.name}</li>\n//       ))}\n//     </ul>\n//   );\n// };\n\n// export default FinancialInstrumentList;\n\n// import React, { useEffect, useState } from 'react';\n// import { fetchData } from '../api';\n\n// const CategorizedData = ({ endpoint }) => {\n//   const [data, setData] = useState(null);\n\n//   useEffect(() => {\n//     const getData = async () => {\n//       const result = await fetchData(endpoint);\n//       setData(result);\n//     };\n//     getData();\n//   }, [endpoint]);\n\n//   if (!data) return <p>Loading...</p>;\n\n//   return (\n//     <div>\n//       <h2>{endpoint} Data</h2>\n//       <pre>{JSON.stringify(data, null, 2)}</pre>\n//     </div>\n//   );\n// };\n\n// export default CategorizedData;\n\n// el code da sh8aaal haaaaaaaa\n\n// import React, { useEffect, useState } from 'react';\n// import { fetchData } from '../api';\n\n// const CategorizedData = ({ endpoint }) => {\n//   const [data, setData] = useState(null);\n//   const [error, setError] = useState(null);\n\n//   useEffect(() => {\n//     const getData = async () => {\n//       try {\n//         const result = await fetchData(endpoint);\n//         setData(result);\n//       } catch (err) {\n//         setError(err.message);\n//       }\n//     };\n//     getData();\n//   }, [endpoint]);\n\n//   if (error) return <p>Error: {error}</p>;\n//   if (!data) return <p>Loading...</p>;\n\n//   return (\n//     <div>\n//       <h2>{endpoint} Data</h2>\n//       <pre>{JSON.stringify(data, null, 2)}</pre>\n//     </div>\n//   );\n// };\n\n// const DataTable = ({ data }) => {\n//   const keys = Object.keys(data); // Get all keys from the data\n\n//   return (\n//     <table>\n//       <thead>\n//         <tr>\n//           {keys.map((key, index) => (\n//             <th key={index}>{key}</th>\n//           ))}\n//         </tr>\n//       </thead>\n//       <tbody>\n//         {data[keys[0]].map((item, rowIndex) => (\n//           <tr key={rowIndex}>\n//             {keys.map((key, colIndex) => (\n//               <td key={colIndex}>{item[key]}</td>\n//             ))}\n//           </tr>\n//         ))}\n//       </tbody>\n//     </table>\n//   );\n// };\n\n// export default CategorizedData;\n\n// import React, { useEffect, useState } from 'react';\n// import { fetchData } from '../api';\n\n// const CategorizedData = ({ endpoint }) => {\n//   const [data, setData] = useState(null);\n//   const [error, setError] = useState(null);\n\n//   useEffect(() => {\n//     const getData = async () => {\n//       try {\n//         const result = await fetchData(endpoint);\n//         setData(result); // Store the fetched data\n//       } catch (err) {\n//         setError(err.message);\n//       }\n//     };\n//     getData();\n//   }, [endpoint]);\n\n//   if (error) return <p>Error: {error}</p>;\n//   if (!data) return <p>Loading...</p>;\n\n//   return (\n//     <div>\n//       <h2>{endpoint.charAt(0).toUpperCase() + endpoint.slice(1)} Data</h2>\n//       <DataTable data={data} />\n//     </div>\n//   );\n// };\n\n// const DataTable = ({ data }) => {\n//   // Ensure data is an array of objects\n//   const tableHeaders = data.length > 0 ? Object.keys(data[0]) : [];\n\n//   return (\n//     <div className=\"overflow-x-auto mt-4\">\n//       <table className=\"min-w-full table-auto border border-gray-300\">\n//         {/* Table Header */}\n//         <thead>\n//           <tr className=\"bg-blue-600 text-white\">\n//             {tableHeaders.map((header, index) => (\n//               <th\n//                 key={index}\n//                 className=\"py-3 px-4 border border-gray-300 text-left capitalize\"\n//               >\n//                 {header.replace(/([A-Z])/g, \" $1\").trim()} {/* Format camelCase */}\n//               </th>\n//             ))}\n//           </tr>\n//         </thead>\n\n//         {/* Table Body */}\n//         <tbody>\n//           {data.map((row, rowIndex) => (\n//             <tr\n//               key={rowIndex}\n//               className={`${\n//                 rowIndex % 2 === 0 ? \"bg-gray-50\" : \"bg-white\"\n//               } hover:bg-gray-200`}\n//             >\n//               {tableHeaders.map((header, colIndex) => (\n//                 <td\n//                   key={colIndex}\n//                   className=\"py-3 px-4 border border-gray-300 text-gray-700\"\n//                 >\n//                   {/* Handle null, undefined, or nested objects */}\n//                   {row[header] !== null &&\n//                   row[header] !== undefined &&\n//                   typeof row[header] !== \"object\"\n//                     ? row[header]\n//                     : row[header] && typeof row[header] === \"object\"\n//                     ? JSON.stringify(row[header])\n//                     : \"N/A\"}\n//                 </td>\n//               ))}\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// };\n\n// export default CategorizedData;\n\n// el code ely sh8aaaaaaaaaaaaaaaaaaaaaaaaaaaal\n\n// import React, { useEffect, useState } from \"react\";\n// import { fetchData } from \"../api\";\n\n// const CategorizedData = ({ endpoint }) => {\n//   const [data, setData] = useState([]);\n//   const [error, setError] = useState(null);\n\n//   useEffect(() => {\n//     const getData = async () => {\n//       try {\n//         const result = await fetchData(endpoint);\n//         console.log(\"Fetched Data:\", result); // Log fetched data to check format\n//         if (Array.isArray(result)) {\n//           setData(result); // Set data only if it's an array\n//         } else if (result && typeof result === \"object\") {\n//           // Convert object values to an array\n//           setData(Object.values(result));\n//         } else {\n//           setData([]); // Fallback to an empty array\n//         }\n//       } catch (err) {\n//         console.error(\"Error fetching data:\", err.message);\n//         setError(err.message);\n//       }\n//     };\n//     getData();\n//   }, [endpoint]);\n\n//   if (error)\n//     return <p className=\"text-center text-red-500 font-semibold\">Error: {error}</p>;\n//   if (!data || data.length === 0)\n//     return <p className=\"text-center text-gray-500 font-semibold\">loading....</p>;\n\n//   return (\n//     <div className=\"p-4\">\n//       <h2 className=\"text-2xl font-semibold text-center text-blue-600 mb-4\">\n//         {endpoint.charAt(0).toUpperCase() + endpoint.slice(1)} Data\n//       </h2>\n//       <DataTable data={data} />\n//     </div>\n//   );\n// };\n\n// const DataTable = ({ data }) => {\n//   if (!Array.isArray(data) || data.length === 0) {\n//     return <p className=\"text-center text-gray-500\">loading...</p>;\n//   }\n\n//   // Extract headers dynamically from the first row\n//   const tableHeaders = Object.keys(data[0]);\n\n//   return (\n//     <div className=\"overflow-x-auto mt-4\">\n//       <table className=\"min-w-full table-auto border border-gray-300\">\n//         {/* Table Header */}\n//         <thead>\n//           <tr className=\"bg-blue-600 text-white\">\n//             {tableHeaders.map((header, index) => (\n//               <th\n//                 key={index}\n//                 className=\"py-3 px-4 border border-gray-300 text-left capitalize\"\n//               >\n//                 {header.replace(/([A-Z])/g, \" $1\").trim()} {/* Format camelCase */}\n//               </th>\n//             ))}\n//           </tr>\n//         </thead>\n\n//         {/* Table Body */}\n//         <tbody>\n//           {data.map((row, rowIndex) => (\n//             <tr\n//               key={rowIndex}\n//               className={`${\n//                 rowIndex % 2 === 0 ? \"bg-gray-50\" : \"bg-white\"\n//               } hover:bg-gray-200`}\n//             >\n//               {tableHeaders.map((header, colIndex) => (\n//                 <td\n//                   key={colIndex}\n//                   className=\"py-3 px-4 border border-gray-300 text-gray-700\"\n//                 >\n//                   {/* Handle null, undefined, or nested objects */}\n//                   {row[header] !== null &&\n//                   row[header] !== undefined &&\n//                   typeof row[header] !== \"object\"\n//                     ? row[header]\n//                     : row[header] && typeof row[header] === \"object\"\n//                     ? JSON.stringify(row[header])\n//                     : \"N/A\"}\n//                 </td>\n//               ))}\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// };\n\n// export default CategorizedData;\n\nimport React, { useEffect, useState } from \"react\";\nimport { fetchData } from \"../api\";\nimport { Table } from \"react-bootstrap\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CategorizedData = ({\n  endpoint\n}) => {\n  _s();\n  const [data, setData] = useState(null);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const getData = async () => {\n      try {\n        const result = await fetchData(endpoint);\n        console.log(\"Fetched Data:\", result); // Log fetched data to check format\n        if (Array.isArray(result)) {\n          setData(result); // Set data only if it's an array\n        } else if (result && typeof result === \"object\") {\n          // Convert object values to an array\n          setData(Object.values(result));\n        } else {\n          setData([]); // Fallback to an empty array\n        }\n      } catch (err) {\n        console.error(\"Error fetching data:\", err.message);\n        setError(err.message);\n      }\n    };\n    getData();\n  }, [endpoint]);\n  if (error) return /*#__PURE__*/_jsxDEV(\"p\", {\n    className: \"text-center text-red-500 font-semibold\",\n    children: [\"Error: \", error]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 339,\n    columnNumber: 16\n  }, this);\n  if (!data || data.length === 0) return /*#__PURE__*/_jsxDEV(\"p\", {\n    className: \"text-center text-gray-500 font-semibold\",\n    children: \"loading....\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 341,\n    columnNumber: 16\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-4\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-2xl font-semibold text-center text-blue-600 mb-4\",\n      children: [endpoint.charAt(0).toUpperCase() + endpoint.slice(1), \" Data\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 345,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(DataTable, {\n      data: data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 348,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 344,\n    columnNumber: 9\n  }, this);\n};\n\n// Tabs and Table Component\n_s(CategorizedData, \"XDVXnHzsKW9JpOo48THjIq2+NOI=\");\n_c = CategorizedData;\nconst TabsWithTable = ({\n  data\n}) => {\n  _s2();\n  const [activeTab, setActiveTab] = useState(Object.keys(data)[0]);\n  if (!data || Object.keys(data).length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No grouped data to display.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 358,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"nav nav-tabs\",\n      children: Object.keys(data).map(key => /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"nav-item\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `nav-link ${activeTab === key ? \"active\" : \"\"}`,\n          onClick: () => setActiveTab(key),\n          children: key.toUpperCase()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 366,\n          columnNumber: 13\n        }, this)\n      }, key, false, {\n        fileName: _jsxFileName,\n        lineNumber: 365,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 363,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-3\",\n      children: data[activeTab] && /*#__PURE__*/_jsxDEV(DataTable, {\n        rows: data[activeTab]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 377,\n        columnNumber: 29\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 376,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 362,\n    columnNumber: 5\n  }, this);\n};\n\n// Table Component\n_s2(TabsWithTable, \"bR5T2LNxiBFC14xCygQA3CUgdOE=\");\n_c2 = TabsWithTable;\nconst DataTable = ({\n  rows\n}) => {\n  if (!rows || rows.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No records found for the selected tab.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 386,\n      columnNumber: 12\n    }, this);\n  }\n  const headers = Object.keys(rows[0]);\n  return /*#__PURE__*/_jsxDEV(Table, {\n    striped: true,\n    bordered: true,\n    hover: true,\n    responsive: true,\n    children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n      children: /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: headers.map(header => /*#__PURE__*/_jsxDEV(\"th\", {\n          className: \"text-capitalize\",\n          children: header.replace(/([A-Z])/g, \" $1\").trim()\n        }, header, false, {\n          fileName: _jsxFileName,\n          lineNumber: 396,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 394,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 393,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n      children: rows.map((row, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: headers.map(header => {\n          var _row$header;\n          return /*#__PURE__*/_jsxDEV(\"td\", {\n            children: (_row$header = row[header]) !== null && _row$header !== void 0 ? _row$header : \"N/A\"\n          }, header, false, {\n            fileName: _jsxFileName,\n            lineNumber: 406,\n            columnNumber: 15\n          }, this);\n        })\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 404,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 402,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 392,\n    columnNumber: 5\n  }, this);\n};\n_c3 = DataTable;\nexport default CategorizedData;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"CategorizedData\");\n$RefreshReg$(_c2, \"TabsWithTable\");\n$RefreshReg$(_c3, \"DataTable\");","map":{"version":3,"names":["React","useEffect","useState","fetchData","Table","jsxDEV","_jsxDEV","CategorizedData","endpoint","_s","data","setData","error","setError","getData","result","console","log","Array","isArray","Object","values","err","message","className","children","fileName","_jsxFileName","lineNumber","columnNumber","length","charAt","toUpperCase","slice","DataTable","_c","TabsWithTable","_s2","activeTab","setActiveTab","keys","map","key","onClick","rows","_c2","headers","striped","bordered","hover","responsive","header","replace","trim","row","index","_row$header","_c3","$RefreshReg$"],"sources":["C:/Users/Philopater/Desktop/task/project/frontend/src/components/CategorizedData.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\r\n\r\n// const FinancialInstrumentList = ({ type }) => {\r\n//   const [data, setData] = useState([]);\r\n//   const [loading, setLoading] = useState(true);\r\n\r\n//   useEffect(() => {\r\n//     setLoading(true);\r\n//     fetch(`/api/financial/${type}`)\r\n//       .then((response) => response.json())\r\n//       .then((data) => {\r\n//         setData(data.hits.hits || []); // Adjust based on JSON structure\r\n//         setLoading(false);\r\n//       });\r\n//   }, [type]);\r\n\r\n//   if (loading) return <p>Loading...</p>;\r\n\r\n//   return (\r\n//     <ul>\r\n//       {data.map((item, index) => (\r\n//         <li key={index}>{item._source.symbol} - {item._source.name}</li>\r\n//       ))}\r\n//     </ul>\r\n//   );\r\n// };\r\n\r\n// export default FinancialInstrumentList;\r\n\r\n// import React, { useEffect, useState } from 'react';\r\n// import { fetchData } from '../api';\r\n\r\n// const CategorizedData = ({ endpoint }) => {\r\n//   const [data, setData] = useState(null);\r\n\r\n//   useEffect(() => {\r\n//     const getData = async () => {\r\n//       const result = await fetchData(endpoint);\r\n//       setData(result);\r\n//     };\r\n//     getData();\r\n//   }, [endpoint]);\r\n\r\n//   if (!data) return <p>Loading...</p>;\r\n\r\n//   return (\r\n//     <div>\r\n//       <h2>{endpoint} Data</h2>\r\n//       <pre>{JSON.stringify(data, null, 2)}</pre>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default CategorizedData;\r\n\r\n    // el code da sh8aaal haaaaaaaa\r\n\r\n// import React, { useEffect, useState } from 'react';\r\n// import { fetchData } from '../api';\r\n\r\n// const CategorizedData = ({ endpoint }) => {\r\n//   const [data, setData] = useState(null);\r\n//   const [error, setError] = useState(null);\r\n\r\n//   useEffect(() => {\r\n//     const getData = async () => {\r\n//       try {\r\n//         const result = await fetchData(endpoint);\r\n//         setData(result);\r\n//       } catch (err) {\r\n//         setError(err.message);\r\n//       }\r\n//     };\r\n//     getData();\r\n//   }, [endpoint]);\r\n\r\n//   if (error) return <p>Error: {error}</p>;\r\n//   if (!data) return <p>Loading...</p>;\r\n\r\n//   return (\r\n//     <div>\r\n//       <h2>{endpoint} Data</h2>\r\n//       <pre>{JSON.stringify(data, null, 2)}</pre>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// const DataTable = ({ data }) => {\r\n//   const keys = Object.keys(data); // Get all keys from the data\r\n\r\n//   return (\r\n//     <table>\r\n//       <thead>\r\n//         <tr>\r\n//           {keys.map((key, index) => (\r\n//             <th key={index}>{key}</th>\r\n//           ))}\r\n//         </tr>\r\n//       </thead>\r\n//       <tbody>\r\n//         {data[keys[0]].map((item, rowIndex) => (\r\n//           <tr key={rowIndex}>\r\n//             {keys.map((key, colIndex) => (\r\n//               <td key={colIndex}>{item[key]}</td>\r\n//             ))}\r\n//           </tr>\r\n//         ))}\r\n//       </tbody>\r\n//     </table>\r\n//   );\r\n// };\r\n\r\n// export default CategorizedData;\r\n\r\n// import React, { useEffect, useState } from 'react';\r\n// import { fetchData } from '../api';\r\n\r\n// const CategorizedData = ({ endpoint }) => {\r\n//   const [data, setData] = useState(null);\r\n//   const [error, setError] = useState(null);\r\n\r\n//   useEffect(() => {\r\n//     const getData = async () => {\r\n//       try {\r\n//         const result = await fetchData(endpoint);\r\n//         setData(result); // Store the fetched data\r\n//       } catch (err) {\r\n//         setError(err.message);\r\n//       }\r\n//     };\r\n//     getData();\r\n//   }, [endpoint]);\r\n\r\n//   if (error) return <p>Error: {error}</p>;\r\n//   if (!data) return <p>Loading...</p>;\r\n\r\n//   return (\r\n//     <div>\r\n//       <h2>{endpoint.charAt(0).toUpperCase() + endpoint.slice(1)} Data</h2>\r\n//       <DataTable data={data} />\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// const DataTable = ({ data }) => {\r\n//   // Ensure data is an array of objects\r\n//   const tableHeaders = data.length > 0 ? Object.keys(data[0]) : [];\r\n\r\n//   return (\r\n//     <div className=\"overflow-x-auto mt-4\">\r\n//       <table className=\"min-w-full table-auto border border-gray-300\">\r\n//         {/* Table Header */}\r\n//         <thead>\r\n//           <tr className=\"bg-blue-600 text-white\">\r\n//             {tableHeaders.map((header, index) => (\r\n//               <th\r\n//                 key={index}\r\n//                 className=\"py-3 px-4 border border-gray-300 text-left capitalize\"\r\n//               >\r\n//                 {header.replace(/([A-Z])/g, \" $1\").trim()} {/* Format camelCase */}\r\n//               </th>\r\n//             ))}\r\n//           </tr>\r\n//         </thead>\r\n\r\n//         {/* Table Body */}\r\n//         <tbody>\r\n//           {data.map((row, rowIndex) => (\r\n//             <tr\r\n//               key={rowIndex}\r\n//               className={`${\r\n//                 rowIndex % 2 === 0 ? \"bg-gray-50\" : \"bg-white\"\r\n//               } hover:bg-gray-200`}\r\n//             >\r\n//               {tableHeaders.map((header, colIndex) => (\r\n//                 <td\r\n//                   key={colIndex}\r\n//                   className=\"py-3 px-4 border border-gray-300 text-gray-700\"\r\n//                 >\r\n//                   {/* Handle null, undefined, or nested objects */}\r\n//                   {row[header] !== null &&\r\n//                   row[header] !== undefined &&\r\n//                   typeof row[header] !== \"object\"\r\n//                     ? row[header]\r\n//                     : row[header] && typeof row[header] === \"object\"\r\n//                     ? JSON.stringify(row[header])\r\n//                     : \"N/A\"}\r\n//                 </td>\r\n//               ))}\r\n//             </tr>\r\n//           ))}\r\n//         </tbody>\r\n//       </table>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default CategorizedData;\r\n\r\n// el code ely sh8aaaaaaaaaaaaaaaaaaaaaaaaaaaal\r\n\r\n// import React, { useEffect, useState } from \"react\";\r\n// import { fetchData } from \"../api\";\r\n\r\n\r\n// const CategorizedData = ({ endpoint }) => {\r\n//   const [data, setData] = useState([]);\r\n//   const [error, setError] = useState(null);\r\n\r\n//   useEffect(() => {\r\n//     const getData = async () => {\r\n//       try {\r\n//         const result = await fetchData(endpoint);\r\n//         console.log(\"Fetched Data:\", result); // Log fetched data to check format\r\n//         if (Array.isArray(result)) {\r\n//           setData(result); // Set data only if it's an array\r\n//         } else if (result && typeof result === \"object\") {\r\n//           // Convert object values to an array\r\n//           setData(Object.values(result));\r\n//         } else {\r\n//           setData([]); // Fallback to an empty array\r\n//         }\r\n//       } catch (err) {\r\n//         console.error(\"Error fetching data:\", err.message);\r\n//         setError(err.message);\r\n//       }\r\n//     };\r\n//     getData();\r\n//   }, [endpoint]);\r\n\r\n//   if (error)\r\n//     return <p className=\"text-center text-red-500 font-semibold\">Error: {error}</p>;\r\n//   if (!data || data.length === 0)\r\n//     return <p className=\"text-center text-gray-500 font-semibold\">loading....</p>;\r\n\r\n//   return (\r\n//     <div className=\"p-4\">\r\n//       <h2 className=\"text-2xl font-semibold text-center text-blue-600 mb-4\">\r\n//         {endpoint.charAt(0).toUpperCase() + endpoint.slice(1)} Data\r\n//       </h2>\r\n//       <DataTable data={data} />\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// const DataTable = ({ data }) => {\r\n//   if (!Array.isArray(data) || data.length === 0) {\r\n//     return <p className=\"text-center text-gray-500\">loading...</p>;\r\n//   }\r\n\r\n//   // Extract headers dynamically from the first row\r\n//   const tableHeaders = Object.keys(data[0]);\r\n\r\n//   return (\r\n//     <div className=\"overflow-x-auto mt-4\">\r\n//       <table className=\"min-w-full table-auto border border-gray-300\">\r\n//         {/* Table Header */}\r\n//         <thead>\r\n//           <tr className=\"bg-blue-600 text-white\">\r\n//             {tableHeaders.map((header, index) => (\r\n//               <th\r\n//                 key={index}\r\n//                 className=\"py-3 px-4 border border-gray-300 text-left capitalize\"\r\n//               >\r\n//                 {header.replace(/([A-Z])/g, \" $1\").trim()} {/* Format camelCase */}\r\n//               </th>\r\n//             ))}\r\n//           </tr>\r\n//         </thead>\r\n\r\n//         {/* Table Body */}\r\n//         <tbody>\r\n//           {data.map((row, rowIndex) => (\r\n//             <tr\r\n//               key={rowIndex}\r\n//               className={`${\r\n//                 rowIndex % 2 === 0 ? \"bg-gray-50\" : \"bg-white\"\r\n//               } hover:bg-gray-200`}\r\n//             >\r\n//               {tableHeaders.map((header, colIndex) => (\r\n//                 <td\r\n//                   key={colIndex}\r\n//                   className=\"py-3 px-4 border border-gray-300 text-gray-700\"\r\n//                 >\r\n//                   {/* Handle null, undefined, or nested objects */}\r\n//                   {row[header] !== null &&\r\n//                   row[header] !== undefined &&\r\n//                   typeof row[header] !== \"object\"\r\n//                     ? row[header]\r\n//                     : row[header] && typeof row[header] === \"object\"\r\n//                     ? JSON.stringify(row[header])\r\n//                     : \"N/A\"}\r\n//                 </td>\r\n//               ))}\r\n//             </tr>\r\n//           ))}\r\n//         </tbody>\r\n//       </table>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default CategorizedData;\r\n\r\n\r\n\r\n\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { fetchData } from \"../api\";\r\nimport { Table } from \"react-bootstrap\";\r\n\r\nconst CategorizedData = ({ endpoint }) => {\r\n  const [data, setData] = useState(null);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n        const getData = async () => {\r\n          try {\r\n            const result = await fetchData(endpoint);\r\n            console.log(\"Fetched Data:\", result); // Log fetched data to check format\r\n            if (Array.isArray(result)) {\r\n              setData(result); // Set data only if it's an array\r\n            } else if (result && typeof result === \"object\") {\r\n              // Convert object values to an array\r\n              setData(Object.values(result));\r\n            } else {\r\n              setData([]); // Fallback to an empty array\r\n            }\r\n          } catch (err) {\r\n            console.error(\"Error fetching data:\", err.message);\r\n            setError(err.message);\r\n          }\r\n        };\r\n        getData();\r\n      }, [endpoint]);\r\n    \r\n      if (error)\r\n        return <p className=\"text-center text-red-500 font-semibold\">Error: {error}</p>;\r\n      if (!data || data.length === 0)\r\n        return <p className=\"text-center text-gray-500 font-semibold\">loading....</p>;\r\n    \r\n      return (\r\n        <div className=\"p-4\">\r\n          <h2 className=\"text-2xl font-semibold text-center text-blue-600 mb-4\">\r\n            {endpoint.charAt(0).toUpperCase() + endpoint.slice(1)} Data\r\n          </h2>\r\n          <DataTable data={data} />\r\n        </div>\r\n      );\r\n    };\r\n\r\n// Tabs and Table Component\r\nconst TabsWithTable = ({ data }) => {\r\n  const [activeTab, setActiveTab] = useState(Object.keys(data)[0]);\r\n\r\n  if (!data || Object.keys(data).length === 0) {\r\n    return <p>No grouped data to display.</p>;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <ul className=\"nav nav-tabs\">\r\n        {Object.keys(data).map((key) => (\r\n          <li className=\"nav-item\" key={key}>\r\n            <button\r\n              className={`nav-link ${activeTab === key ? \"active\" : \"\"}`}\r\n              onClick={() => setActiveTab(key)}\r\n            >\r\n              {key.toUpperCase()}\r\n            </button>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n\r\n      <div className=\"mt-3\">\r\n        {data[activeTab] && <DataTable rows={data[activeTab]} />}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n// Table Component\r\nconst DataTable = ({ rows }) => {\r\n  if (!rows || rows.length === 0) {\r\n    return <p>No records found for the selected tab.</p>;\r\n  }\r\n\r\n  const headers = Object.keys(rows[0]);\r\n\r\n  return (\r\n    <Table striped bordered hover responsive>\r\n      <thead>\r\n        <tr>\r\n          {headers.map((header) => (\r\n            <th key={header} className=\"text-capitalize\">\r\n              {header.replace(/([A-Z])/g, \" $1\").trim()}\r\n            </th>\r\n          ))}\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {rows.map((row, index) => (\r\n          <tr key={index}>\r\n            {headers.map((header) => (\r\n              <td key={header}>{row[header] ?? \"N/A\"}</td>\r\n            ))}\r\n          </tr>\r\n        ))}\r\n      </tbody>\r\n    </Table>\r\n  );\r\n};\r\n\r\nexport default CategorizedData;\r\n\r\n\r\n\r\n\r\n"],"mappings":";;;AAAA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEI;;AAEJ;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAC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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}