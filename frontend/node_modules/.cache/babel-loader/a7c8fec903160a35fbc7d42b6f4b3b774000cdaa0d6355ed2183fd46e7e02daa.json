{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Philopater\\\\Desktop\\\\task\\\\project\\\\frontend\\\\src\\\\components\\\\CategorizedData.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n\n// const FinancialInstrumentList = ({ type }) => {\n//   const [data, setData] = useState([]);\n//   const [loading, setLoading] = useState(true);\n\n//   useEffect(() => {\n//     setLoading(true);\n//     fetch(`/api/financial/${type}`)\n//       .then((response) => response.json())\n//       .then((data) => {\n//         setData(data.hits.hits || []); // Adjust based on JSON structure\n//         setLoading(false);\n//       });\n//   }, [type]);\n\n//   if (loading) return <p>Loading...</p>;\n\n//   return (\n//     <ul>\n//       {data.map((item, index) => (\n//         <li key={index}>{item._source.symbol} - {item._source.name}</li>\n//       ))}\n//     </ul>\n//   );\n// };\n\n// export default FinancialInstrumentList;\n\n// import React, { useEffect, useState } from 'react';\n// import { fetchData } from '../api';\n\n// const CategorizedData = ({ endpoint }) => {\n//   const [data, setData] = useState(null);\n\n//   useEffect(() => {\n//     const getData = async () => {\n//       const result = await fetchData(endpoint);\n//       setData(result);\n//     };\n//     getData();\n//   }, [endpoint]);\n\n//   if (!data) return <p>Loading...</p>;\n\n//   return (\n//     <div>\n//       <h2>{endpoint} Data</h2>\n//       <pre>{JSON.stringify(data, null, 2)}</pre>\n//     </div>\n//   );\n// };\n\n// export default CategorizedData;\n\n// el code da sh8aaal haaaaaaaa\n\n// import React, { useEffect, useState } from 'react';\n// import { fetchData } from '../api';\n\n// const CategorizedData = ({ endpoint }) => {\n//   const [data, setData] = useState(null);\n//   const [error, setError] = useState(null);\n\n//   useEffect(() => {\n//     const getData = async () => {\n//       try {\n//         const result = await fetchData(endpoint);\n//         setData(result);\n//       } catch (err) {\n//         setError(err.message);\n//       }\n//     };\n//     getData();\n//   }, [endpoint]);\n\n//   if (error) return <p>Error: {error}</p>;\n//   if (!data) return <p>Loading...</p>;\n\n//   return (\n//     <div>\n//       <h2>{endpoint} Data</h2>\n//       <pre>{JSON.stringify(data, null, 2)}</pre>\n//     </div>\n//   );\n// };\n\n// const DataTable = ({ data }) => {\n//   const keys = Object.keys(data); // Get all keys from the data\n\n//   return (\n//     <table>\n//       <thead>\n//         <tr>\n//           {keys.map((key, index) => (\n//             <th key={index}>{key}</th>\n//           ))}\n//         </tr>\n//       </thead>\n//       <tbody>\n//         {data[keys[0]].map((item, rowIndex) => (\n//           <tr key={rowIndex}>\n//             {keys.map((key, colIndex) => (\n//               <td key={colIndex}>{item[key]}</td>\n//             ))}\n//           </tr>\n//         ))}\n//       </tbody>\n//     </table>\n//   );\n// };\n\n// export default CategorizedData;\n\n// import React, { useEffect, useState } from 'react';\n// import { fetchData } from '../api';\n\n// const CategorizedData = ({ endpoint }) => {\n//   const [data, setData] = useState(null);\n//   const [error, setError] = useState(null);\n\n//   useEffect(() => {\n//     const getData = async () => {\n//       try {\n//         const result = await fetchData(endpoint);\n//         setData(result); // Store the fetched data\n//       } catch (err) {\n//         setError(err.message);\n//       }\n//     };\n//     getData();\n//   }, [endpoint]);\n\n//   if (error) return <p>Error: {error}</p>;\n//   if (!data) return <p>Loading...</p>;\n\n//   return (\n//     <div>\n//       <h2>{endpoint.charAt(0).toUpperCase() + endpoint.slice(1)} Data</h2>\n//       <DataTable data={data} />\n//     </div>\n//   );\n// };\n\n// const DataTable = ({ data }) => {\n//   // Ensure data is an array of objects\n//   const tableHeaders = data.length > 0 ? Object.keys(data[0]) : [];\n\n//   return (\n//     <div className=\"overflow-x-auto mt-4\">\n//       <table className=\"min-w-full table-auto border border-gray-300\">\n//         {/* Table Header */}\n//         <thead>\n//           <tr className=\"bg-blue-600 text-white\">\n//             {tableHeaders.map((header, index) => (\n//               <th\n//                 key={index}\n//                 className=\"py-3 px-4 border border-gray-300 text-left capitalize\"\n//               >\n//                 {header.replace(/([A-Z])/g, \" $1\").trim()} {/* Format camelCase */}\n//               </th>\n//             ))}\n//           </tr>\n//         </thead>\n\n//         {/* Table Body */}\n//         <tbody>\n//           {data.map((row, rowIndex) => (\n//             <tr\n//               key={rowIndex}\n//               className={`${\n//                 rowIndex % 2 === 0 ? \"bg-gray-50\" : \"bg-white\"\n//               } hover:bg-gray-200`}\n//             >\n//               {tableHeaders.map((header, colIndex) => (\n//                 <td\n//                   key={colIndex}\n//                   className=\"py-3 px-4 border border-gray-300 text-gray-700\"\n//                 >\n//                   {/* Handle null, undefined, or nested objects */}\n//                   {row[header] !== null &&\n//                   row[header] !== undefined &&\n//                   typeof row[header] !== \"object\"\n//                     ? row[header]\n//                     : row[header] && typeof row[header] === \"object\"\n//                     ? JSON.stringify(row[header])\n//                     : \"N/A\"}\n//                 </td>\n//               ))}\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// };\n\n// export default CategorizedData;\n\n// import React, { useEffect, useState } from \"react\";\n// import { fetchData } from \"../api\";\n\n// const CategorizedData = ({ endpoint }) => {\n//   const [data, setData] = useState([]);\n//   const [error, setError] = useState(null);\n\n//   useEffect(() => {\n//     const getData = async () => {\n//       try {\n//         const result = await fetchData(endpoint);\n//         console.log(\"Fetched Data:\", result); // Log fetched data to check format\n//         if (Array.isArray(result)) {\n//           setData(result); // Set data only if it's an array\n//         } else if (result && typeof result === \"object\") {\n//           // Convert object values to an array\n//           setData(Object.values(result));\n//         } else {\n//           setData([]); // Fallback to an empty array\n//         }\n//       } catch (err) {\n//         console.error(\"Error fetching data:\", err.message);\n//         setError(err.message);\n//       }\n//     };\n//     getData();\n//   }, [endpoint]);\n\n//   if (error)\n//     return <p className=\"text-center text-red-500 font-semibold\">Error: {error}</p>;\n//   if (!data || data.length === 0)\n//     return <p className=\"text-center text-gray-500 font-semibold\">loading....</p>;\n\n//   return (\n//     <div className=\"p-4\">\n//       <h2 className=\"text-2xl font-semibold text-center text-blue-600 mb-4\">\n//         {endpoint.charAt(0).toUpperCase() + endpoint.slice(1)} Data\n//       </h2>\n//       <DataTable data={data} />\n//     </div>\n//   );\n// };\n\n// const DataTable = ({ data }) => {\n//   if (!Array.isArray(data) || data.length === 0) {\n//     return <p className=\"text-center text-gray-500\">loading...</p>;\n//   }\n\n//   // Extract headers dynamically from the first row\n//   const tableHeaders = Object.keys(data[0]);\n\n//   return (\n//     <div className=\"overflow-x-auto mt-4\">\n//       <table className=\"min-w-full table-auto border border-gray-300\">\n//         {/* Table Header */}\n//         <thead>\n//           <tr className=\"bg-blue-600 text-white\">\n//             {tableHeaders.map((header, index) => (\n//               <th\n//                 key={index}\n//                 className=\"py-3 px-4 border border-gray-300 text-left capitalize\"\n//               >\n//                 {header.replace(/([A-Z])/g, \" $1\").trim()} {/* Format camelCase */}\n//               </th>\n//             ))}\n//           </tr>\n//         </thead>\n\n//         {/* Table Body */}\n//         <tbody>\n//           {data.map((row, rowIndex) => (\n//             <tr\n//               key={rowIndex}\n//               className={`${\n//                 rowIndex % 2 === 0 ? \"bg-gray-50\" : \"bg-white\"\n//               } hover:bg-gray-200`}\n//             >\n//               {tableHeaders.map((header, colIndex) => (\n//                 <td\n//                   key={colIndex}\n//                   className=\"py-3 px-4 border border-gray-300 text-gray-700\"\n//                 >\n//                   {/* Handle null, undefined, or nested objects */}\n//                   {row[header] !== null &&\n//                   row[header] !== undefined &&\n//                   typeof row[header] !== \"object\"\n//                     ? row[header]\n//                     : row[header] && typeof row[header] === \"object\"\n//                     ? JSON.stringify(row[header])\n//                     : \"N/A\"}\n//                 </td>\n//               ))}\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// };\n\n// export default CategorizedData;\n\nimport React, { useEffect, useState } from \"react\";\nimport { fetchData } from \"../api\";\nimport { Bar } from \"react-chartjs-2\"; // Chart.js integration\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CategorizedData = ({\n  endpoint\n}) => {\n  _s();\n  const [data, setData] = useState([]);\n  const [error, setError] = useState(null);\n  const [search, setSearch] = useState(\"\"); // Search input\n  const [chartData, setChartData] = useState(null); // Data for the chart\n\n  // Fetch data from the backend\n  useEffect(() => {\n    const getData = async () => {\n      try {\n        const result = await fetchData(endpoint);\n        setData(result.hits.hits.map(item => item._source)); // Extract `_source` data\n      } catch (err) {\n        setError(err.message);\n      }\n    };\n    getData();\n  }, [endpoint]);\n\n  // Apply search filter\n  const filteredData = data.filter(row => Object.values(row).some(val => val.toString().toLowerCase().includes(search.toLowerCase())));\n\n  // Prepare data for the chart (e.g., currency distribution)\n  useEffect(() => {\n    const currencyCount = {};\n    data.forEach(item => {\n      currencyCount[item.currency] = (currencyCount[item.currency] || 0) + 1;\n    });\n    setChartData({\n      labels: Object.keys(currencyCount),\n      datasets: [{\n        label: \"Currency Distribution\",\n        data: Object.values(currencyCount),\n        backgroundColor: \"rgba(54, 162, 235, 0.6)\"\n      }]\n    });\n  }, [data]);\n  if (error) return /*#__PURE__*/_jsxDEV(\"p\", {\n    className: \"text-red-500 font-semibold\",\n    children: error\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 358,\n    columnNumber: 21\n  }, this);\n  if (!data.length) return /*#__PURE__*/_jsxDEV(\"p\", {\n    className: \"text-gray-500 font-semibold\",\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 359,\n    columnNumber: 28\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-4\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-2xl font-bold mb-4\",\n      children: [endpoint.toUpperCase(), \" Data\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 363,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Search...\",\n      className: \"border p-2 mb-4 w-full\",\n      value: search,\n      onChange: e => setSearch(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 366,\n      columnNumber: 7\n    }, this), chartData && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-8\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"text-lg font-semibold mb-2\",\n        children: \"Currency Distribution\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 377,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Bar, {\n        data: chartData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 378,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 376,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(DataTable, {\n      data: filteredData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 383,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 362,\n    columnNumber: 5\n  }, this);\n};\n\n// DataTable Component for displaying table\n_s(CategorizedData, \"wI6+sEip/2frvRW/9mkjUZY10jo=\");\n_c = CategorizedData;\nconst DataTable = ({\n  data\n}) => {\n  if (!Array.isArray(data) || data.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-center text-gray-500\",\n      children: \"No data available.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 391,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Extract column headers dynamically from the first row\n  const tableHeaders = Object.keys(data[0]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"overflow-x-auto\",\n    children: /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"min-w-full table-auto border border-gray-300\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          className: \"bg-blue-600 text-white\",\n          children: tableHeaders.map((header, index) => /*#__PURE__*/_jsxDEV(\"th\", {\n            className: \"py-3 px-4 border border-gray-300 text-left capitalize\",\n            children: [header.replace(/([A-Z])/g, \" $1\").trim(), \" \"]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 404,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 402,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 401,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: data.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          className: `${rowIndex % 2 === 0 ? \"bg-gray-50\" : \"bg-white\"} hover:bg-gray-200`,\n          children: tableHeaders.map((header, colIndex) => /*#__PURE__*/_jsxDEV(\"td\", {\n            className: \"py-3 px-4 border border-gray-300 text-gray-700\",\n            children: row[header] !== null && row[header] !== undefined && typeof row[header] !== \"object\" ? row[header] : row[header] && typeof row[header] === \"object\" ? JSON.stringify(row[header]) : \"N/A\"\n          }, colIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 424,\n            columnNumber: 17\n          }, this))\n        }, rowIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 417,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 415,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 399,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 398,\n    columnNumber: 5\n  }, this);\n};\n_c2 = DataTable;\nexport default CategorizedData;\nvar _c, _c2;\n$RefreshReg$(_c, \"CategorizedData\");\n$RefreshReg$(_c2, \"DataTable\");","map":{"version":3,"names":["React","useEffect","useState","fetchData","Bar","jsxDEV","_jsxDEV","CategorizedData","endpoint","_s","data","setData","error","setError","search","setSearch","chartData","setChartData","getData","result","hits","map","item","_source","err","message","filteredData","filter","row","Object","values","some","val","toString","toLowerCase","includes","currencyCount","forEach","currency","labels","keys","datasets","label","backgroundColor","className","children","fileName","_jsxFileName","lineNumber","columnNumber","length","toUpperCase","type","placeholder","value","onChange","e","target","DataTable","_c","Array","isArray","tableHeaders","header","index","replace","trim","rowIndex","colIndex","undefined","JSON","stringify","_c2","$RefreshReg$"],"sources":["C:/Users/Philopater/Desktop/task/project/frontend/src/components/CategorizedData.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\r\n\r\n// const FinancialInstrumentList = ({ type }) => {\r\n//   const [data, setData] = useState([]);\r\n//   const [loading, setLoading] = useState(true);\r\n\r\n//   useEffect(() => {\r\n//     setLoading(true);\r\n//     fetch(`/api/financial/${type}`)\r\n//       .then((response) => response.json())\r\n//       .then((data) => {\r\n//         setData(data.hits.hits || []); // Adjust based on JSON structure\r\n//         setLoading(false);\r\n//       });\r\n//   }, [type]);\r\n\r\n//   if (loading) return <p>Loading...</p>;\r\n\r\n//   return (\r\n//     <ul>\r\n//       {data.map((item, index) => (\r\n//         <li key={index}>{item._source.symbol} - {item._source.name}</li>\r\n//       ))}\r\n//     </ul>\r\n//   );\r\n// };\r\n\r\n// export default FinancialInstrumentList;\r\n\r\n// import React, { useEffect, useState } from 'react';\r\n// import { fetchData } from '../api';\r\n\r\n// const CategorizedData = ({ endpoint }) => {\r\n//   const [data, setData] = useState(null);\r\n\r\n//   useEffect(() => {\r\n//     const getData = async () => {\r\n//       const result = await fetchData(endpoint);\r\n//       setData(result);\r\n//     };\r\n//     getData();\r\n//   }, [endpoint]);\r\n\r\n//   if (!data) return <p>Loading...</p>;\r\n\r\n//   return (\r\n//     <div>\r\n//       <h2>{endpoint} Data</h2>\r\n//       <pre>{JSON.stringify(data, null, 2)}</pre>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default CategorizedData;\r\n\r\n    // el code da sh8aaal haaaaaaaa\r\n\r\n// import React, { useEffect, useState } from 'react';\r\n// import { fetchData } from '../api';\r\n\r\n// const CategorizedData = ({ endpoint }) => {\r\n//   const [data, setData] = useState(null);\r\n//   const [error, setError] = useState(null);\r\n\r\n//   useEffect(() => {\r\n//     const getData = async () => {\r\n//       try {\r\n//         const result = await fetchData(endpoint);\r\n//         setData(result);\r\n//       } catch (err) {\r\n//         setError(err.message);\r\n//       }\r\n//     };\r\n//     getData();\r\n//   }, [endpoint]);\r\n\r\n//   if (error) return <p>Error: {error}</p>;\r\n//   if (!data) return <p>Loading...</p>;\r\n\r\n//   return (\r\n//     <div>\r\n//       <h2>{endpoint} Data</h2>\r\n//       <pre>{JSON.stringify(data, null, 2)}</pre>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// const DataTable = ({ data }) => {\r\n//   const keys = Object.keys(data); // Get all keys from the data\r\n\r\n//   return (\r\n//     <table>\r\n//       <thead>\r\n//         <tr>\r\n//           {keys.map((key, index) => (\r\n//             <th key={index}>{key}</th>\r\n//           ))}\r\n//         </tr>\r\n//       </thead>\r\n//       <tbody>\r\n//         {data[keys[0]].map((item, rowIndex) => (\r\n//           <tr key={rowIndex}>\r\n//             {keys.map((key, colIndex) => (\r\n//               <td key={colIndex}>{item[key]}</td>\r\n//             ))}\r\n//           </tr>\r\n//         ))}\r\n//       </tbody>\r\n//     </table>\r\n//   );\r\n// };\r\n\r\n// export default CategorizedData;\r\n\r\n// import React, { useEffect, useState } from 'react';\r\n// import { fetchData } from '../api';\r\n\r\n// const CategorizedData = ({ endpoint }) => {\r\n//   const [data, setData] = useState(null);\r\n//   const [error, setError] = useState(null);\r\n\r\n//   useEffect(() => {\r\n//     const getData = async () => {\r\n//       try {\r\n//         const result = await fetchData(endpoint);\r\n//         setData(result); // Store the fetched data\r\n//       } catch (err) {\r\n//         setError(err.message);\r\n//       }\r\n//     };\r\n//     getData();\r\n//   }, [endpoint]);\r\n\r\n//   if (error) return <p>Error: {error}</p>;\r\n//   if (!data) return <p>Loading...</p>;\r\n\r\n//   return (\r\n//     <div>\r\n//       <h2>{endpoint.charAt(0).toUpperCase() + endpoint.slice(1)} Data</h2>\r\n//       <DataTable data={data} />\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// const DataTable = ({ data }) => {\r\n//   // Ensure data is an array of objects\r\n//   const tableHeaders = data.length > 0 ? Object.keys(data[0]) : [];\r\n\r\n//   return (\r\n//     <div className=\"overflow-x-auto mt-4\">\r\n//       <table className=\"min-w-full table-auto border border-gray-300\">\r\n//         {/* Table Header */}\r\n//         <thead>\r\n//           <tr className=\"bg-blue-600 text-white\">\r\n//             {tableHeaders.map((header, index) => (\r\n//               <th\r\n//                 key={index}\r\n//                 className=\"py-3 px-4 border border-gray-300 text-left capitalize\"\r\n//               >\r\n//                 {header.replace(/([A-Z])/g, \" $1\").trim()} {/* Format camelCase */}\r\n//               </th>\r\n//             ))}\r\n//           </tr>\r\n//         </thead>\r\n\r\n//         {/* Table Body */}\r\n//         <tbody>\r\n//           {data.map((row, rowIndex) => (\r\n//             <tr\r\n//               key={rowIndex}\r\n//               className={`${\r\n//                 rowIndex % 2 === 0 ? \"bg-gray-50\" : \"bg-white\"\r\n//               } hover:bg-gray-200`}\r\n//             >\r\n//               {tableHeaders.map((header, colIndex) => (\r\n//                 <td\r\n//                   key={colIndex}\r\n//                   className=\"py-3 px-4 border border-gray-300 text-gray-700\"\r\n//                 >\r\n//                   {/* Handle null, undefined, or nested objects */}\r\n//                   {row[header] !== null &&\r\n//                   row[header] !== undefined &&\r\n//                   typeof row[header] !== \"object\"\r\n//                     ? row[header]\r\n//                     : row[header] && typeof row[header] === \"object\"\r\n//                     ? JSON.stringify(row[header])\r\n//                     : \"N/A\"}\r\n//                 </td>\r\n//               ))}\r\n//             </tr>\r\n//           ))}\r\n//         </tbody>\r\n//       </table>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n\r\n\r\n\r\n\r\n// export default CategorizedData;\r\n\r\n// import React, { useEffect, useState } from \"react\";\r\n// import { fetchData } from \"../api\";\r\n\r\n// const CategorizedData = ({ endpoint }) => {\r\n//   const [data, setData] = useState([]);\r\n//   const [error, setError] = useState(null);\r\n\r\n//   useEffect(() => {\r\n//     const getData = async () => {\r\n//       try {\r\n//         const result = await fetchData(endpoint);\r\n//         console.log(\"Fetched Data:\", result); // Log fetched data to check format\r\n//         if (Array.isArray(result)) {\r\n//           setData(result); // Set data only if it's an array\r\n//         } else if (result && typeof result === \"object\") {\r\n//           // Convert object values to an array\r\n//           setData(Object.values(result));\r\n//         } else {\r\n//           setData([]); // Fallback to an empty array\r\n//         }\r\n//       } catch (err) {\r\n//         console.error(\"Error fetching data:\", err.message);\r\n//         setError(err.message);\r\n//       }\r\n//     };\r\n//     getData();\r\n//   }, [endpoint]);\r\n\r\n//   if (error)\r\n//     return <p className=\"text-center text-red-500 font-semibold\">Error: {error}</p>;\r\n//   if (!data || data.length === 0)\r\n//     return <p className=\"text-center text-gray-500 font-semibold\">loading....</p>;\r\n\r\n//   return (\r\n//     <div className=\"p-4\">\r\n//       <h2 className=\"text-2xl font-semibold text-center text-blue-600 mb-4\">\r\n//         {endpoint.charAt(0).toUpperCase() + endpoint.slice(1)} Data\r\n//       </h2>\r\n//       <DataTable data={data} />\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// const DataTable = ({ data }) => {\r\n//   if (!Array.isArray(data) || data.length === 0) {\r\n//     return <p className=\"text-center text-gray-500\">loading...</p>;\r\n//   }\r\n\r\n//   // Extract headers dynamically from the first row\r\n//   const tableHeaders = Object.keys(data[0]);\r\n\r\n//   return (\r\n//     <div className=\"overflow-x-auto mt-4\">\r\n//       <table className=\"min-w-full table-auto border border-gray-300\">\r\n//         {/* Table Header */}\r\n//         <thead>\r\n//           <tr className=\"bg-blue-600 text-white\">\r\n//             {tableHeaders.map((header, index) => (\r\n//               <th\r\n//                 key={index}\r\n//                 className=\"py-3 px-4 border border-gray-300 text-left capitalize\"\r\n//               >\r\n//                 {header.replace(/([A-Z])/g, \" $1\").trim()} {/* Format camelCase */}\r\n//               </th>\r\n//             ))}\r\n//           </tr>\r\n//         </thead>\r\n\r\n//         {/* Table Body */}\r\n//         <tbody>\r\n//           {data.map((row, rowIndex) => (\r\n//             <tr\r\n//               key={rowIndex}\r\n//               className={`${\r\n//                 rowIndex % 2 === 0 ? \"bg-gray-50\" : \"bg-white\"\r\n//               } hover:bg-gray-200`}\r\n//             >\r\n//               {tableHeaders.map((header, colIndex) => (\r\n//                 <td\r\n//                   key={colIndex}\r\n//                   className=\"py-3 px-4 border border-gray-300 text-gray-700\"\r\n//                 >\r\n//                   {/* Handle null, undefined, or nested objects */}\r\n//                   {row[header] !== null &&\r\n//                   row[header] !== undefined &&\r\n//                   typeof row[header] !== \"object\"\r\n//                     ? row[header]\r\n//                     : row[header] && typeof row[header] === \"object\"\r\n//                     ? JSON.stringify(row[header])\r\n//                     : \"N/A\"}\r\n//                 </td>\r\n//               ))}\r\n//             </tr>\r\n//           ))}\r\n//         </tbody>\r\n//       </table>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default CategorizedData;\r\n\r\n\r\n\r\n\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { fetchData } from \"../api\";\r\nimport { Bar } from \"react-chartjs-2\"; // Chart.js integration\r\n\r\nconst CategorizedData = ({ endpoint }) => {\r\n  const [data, setData] = useState([]);\r\n  const [error, setError] = useState(null);\r\n  const [search, setSearch] = useState(\"\"); // Search input\r\n  const [chartData, setChartData] = useState(null); // Data for the chart\r\n\r\n  // Fetch data from the backend\r\n  useEffect(() => {\r\n    const getData = async () => {\r\n      try {\r\n        const result = await fetchData(endpoint);\r\n        setData(result.hits.hits.map((item) => item._source)); // Extract `_source` data\r\n      } catch (err) {\r\n        setError(err.message);\r\n      }\r\n    };\r\n    getData();\r\n  }, [endpoint]);\r\n\r\n  // Apply search filter\r\n  const filteredData = data.filter((row) =>\r\n    Object.values(row).some((val) =>\r\n      val.toString().toLowerCase().includes(search.toLowerCase())\r\n    )\r\n  );\r\n\r\n  // Prepare data for the chart (e.g., currency distribution)\r\n  useEffect(() => {\r\n    const currencyCount = {};\r\n    data.forEach((item) => {\r\n      currencyCount[item.currency] = (currencyCount[item.currency] || 0) + 1;\r\n    });\r\n    setChartData({\r\n      labels: Object.keys(currencyCount),\r\n      datasets: [\r\n        {\r\n          label: \"Currency Distribution\",\r\n          data: Object.values(currencyCount),\r\n          backgroundColor: \"rgba(54, 162, 235, 0.6)\",\r\n        },\r\n      ],\r\n    });\r\n  }, [data]);\r\n\r\n  if (error) return <p className=\"text-red-500 font-semibold\">{error}</p>;\r\n  if (!data.length) return <p className=\"text-gray-500 font-semibold\">Loading...</p>;\r\n\r\n  return (\r\n    <div className=\"p-4\">\r\n      <h2 className=\"text-2xl font-bold mb-4\">{endpoint.toUpperCase()} Data</h2>\r\n\r\n      {/* Search Bar */}\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Search...\"\r\n        className=\"border p-2 mb-4 w-full\"\r\n        value={search}\r\n        onChange={(e) => setSearch(e.target.value)}\r\n      />\r\n\r\n      {/* Chart */}\r\n      {chartData && (\r\n        <div className=\"mb-8\">\r\n          <h3 className=\"text-lg font-semibold mb-2\">Currency Distribution</h3>\r\n          <Bar data={chartData} />\r\n        </div>\r\n      )}\r\n\r\n      {/* Table */}\r\n      <DataTable data={filteredData} />\r\n    </div>\r\n  );\r\n};\r\n\r\n// DataTable Component for displaying table\r\nconst DataTable = ({ data }) => {\r\n  if (!Array.isArray(data) || data.length === 0) {\r\n    return <p className=\"text-center text-gray-500\">No data available.</p>;\r\n  }\r\n\r\n  // Extract column headers dynamically from the first row\r\n  const tableHeaders = Object.keys(data[0]);\r\n\r\n  return (\r\n    <div className=\"overflow-x-auto\">\r\n      <table className=\"min-w-full table-auto border border-gray-300\">\r\n        {/* Table Header */}\r\n        <thead>\r\n          <tr className=\"bg-blue-600 text-white\">\r\n            {tableHeaders.map((header, index) => (\r\n              <th\r\n                key={index}\r\n                className=\"py-3 px-4 border border-gray-300 text-left capitalize\"\r\n              >\r\n                {header.replace(/([A-Z])/g, \" $1\").trim()} {/* Format camelCase */}\r\n              </th>\r\n            ))}\r\n          </tr>\r\n        </thead>\r\n\r\n        {/* Table Body */}\r\n        <tbody>\r\n          {data.map((row, rowIndex) => (\r\n            <tr\r\n              key={rowIndex}\r\n              className={`${\r\n                rowIndex % 2 === 0 ? \"bg-gray-50\" : \"bg-white\"\r\n              } hover:bg-gray-200`}\r\n            >\r\n              {tableHeaders.map((header, colIndex) => (\r\n                <td\r\n                  key={colIndex}\r\n                  className=\"py-3 px-4 border border-gray-300 text-gray-700\"\r\n                >\r\n                  {/* Handle null, undefined, or nested objects */}\r\n                  {row[header] !== null &&\r\n                  row[header] !== undefined &&\r\n                  typeof row[header] !== \"object\"\r\n                    ? row[header]\r\n                    : row[header] && typeof row[header] === \"object\"\r\n                    ? JSON.stringify(row[header])\r\n                    : \"N/A\"}\r\n                </td>\r\n              ))}\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CategorizedData;"],"mappings":";;AAAA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEI;;AAEJ;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAMA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}